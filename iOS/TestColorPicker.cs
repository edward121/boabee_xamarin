// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using AdvancedColorPicker;
using CoreImage;
using System.Linq;
using CoreGraphics;
using BoaBeePCL;

namespace BoaBee.iOS
{
	public partial class TestColorPicker : UIViewController, IUITextFieldDelegate
	{
		public TestColorPicker (IntPtr handle) : base (handle)
		{
		}

		public colorPickerMode mode;
		public DBColor initialColor;

//		public delegate void didDismiss();
//		public event didDismiss onDismiss;

		public delegate void didPickColor(colorPickerMode mode, DBColor color);
		public event didPickColor onPickColor;

		private CIColor selectedColor = new CIColor(0, 0, 0);

		private ColorPickerView pickerView;

		private NSObject kbFrameChangeNoificationToken;
		private NSObject kbWillAppearNoificationToken;
		private NSObject kbWillDisappearNoificationToken;

		private void colorChanged(UIColor newColor)
		{
			this.selectedColor = new CIColor(newColor);

//					int r = (int)Math.Round((float)this.selectedColor.Red * 255);
//					int g = (int)Math.Round((float)this.selectedColor.Green * 255);
//					int b = (int)Math.Round((float)this.selectedColor.Blue * 255);
//					int a = (int)Math.Round((float)this.selectedColor.Alpha * 255);

			float r = (float)this.selectedColor.Red;
			float g = (float)this.selectedColor.Green;
			float b = (float)this.selectedColor.Blue;

			this.redSlider.SetValue(r, true);
			this.greenSlider.SetValue(g, true);
			this.blueSlider.SetValue(b, true);

//			Console.Error.WriteLine("r:{0}, g:{1}, b:{2}, a:{3}", r, g, b, a);

			string rString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((r * 255))) : ((int)Math.Round((r * 255))).ToString();
			string gString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((g * 255))) : ((int)Math.Round((g * 255))).ToString();
			string bString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((b * 255))) : ((int)Math.Round((b * 255))).ToString();

			this.redTextField.Text = rString;
			this.greenTextField.Text = gString;
			this.blueTextField.Text = bString;
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.redTextField.Delegate = this;
			this.greenTextField.Delegate = this;
			this.blueTextField.Delegate = this;

			UIStringAttributes placeholderAttributes = new UIStringAttributes();
			placeholderAttributes.ForegroundColor = UIColor.FromRGB(0x71, 0x71, 0x71);

			NSAttributedString textFieldPlaceholder = new NSAttributedString (this.redTextField.Placeholder, placeholderAttributes);
			this.redTextField.AttributedPlaceholder = textFieldPlaceholder;

			textFieldPlaceholder = new NSAttributedString (this.greenTextField.Placeholder, placeholderAttributes);
			this.greenTextField.AttributedPlaceholder = textFieldPlaceholder;

			textFieldPlaceholder = new NSAttributedString (this.blueTextField.Placeholder, placeholderAttributes);
			this.blueTextField.AttributedPlaceholder = textFieldPlaceholder;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.View.LayoutIfNeeded();

			this.pickerView = new ColorPickerView(this.pickerPlaceholder.Bounds);
			this.pickerView.ColorPicked += (object sender, ColorPickedEventArgs e) => 
			{
				this.colorChanged(e.SelectedColor);
			};

			switch (this.mode)
			{
				case colorPickerMode.QuestionFontColor:
				{
					DBColor fontColor = this.initialColor == null ? DBLocalDataStore.GetInstance().GetQuestionFontColor() : this.initialColor;
					this.selectedColor = new CIColor(fontColor.red, fontColor.green, fontColor.blue);

					this.colorChanged(new UIColor(this.selectedColor));

					break;
				}
//
				case colorPickerMode.QuestionBackground:
				{
					DBColor backgroundColor = this.initialColor == null ? DBLocalDataStore.GetInstance().GetQuestionBackgroundColor() : this.initialColor;
					this.selectedColor = new CIColor(backgroundColor.red, backgroundColor.green, backgroundColor.blue);

					this.colorChanged(new UIColor(this.selectedColor));

					break;
				}
				case colorPickerMode.AnswerFontColor:
				{
					DBColor fontColor = this.initialColor == null ? DBLocalDataStore.GetInstance().GetAnswerFontColor() : this.initialColor;
					this.selectedColor = new CIColor(fontColor.red, fontColor.green, fontColor.blue);

					this.colorChanged(new UIColor(this.selectedColor));

					break;
				}
				case colorPickerMode.AnswerBackground:
				{
					DBColor backgroundColor = this.initialColor == null ? DBLocalDataStore.GetInstance().GetAnswerBackgroundColor() : this.initialColor;
					this.selectedColor = new CIColor(backgroundColor.red, backgroundColor.green, backgroundColor.blue);

					this.colorChanged(new UIColor(this.selectedColor));

					break;
				}
			}

			this.pickerView.SelectedColor = new UIColor(this.selectedColor);
			this.pickerView.AutoresizingMask = UIViewAutoresizing.All;

			this.pickerPlaceholder.AddSubview(pickerView);
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);

//			this.kbWillAppearNoificationToken = UIKeyboard.Notifications.ObserveWillShow(kbWillAppearCallback);
//			this.kbWillDisappearNoificationToken = UIKeyboard.Notifications.ObserveWillHide(kbWillDisappearCallback);
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}

			if (this.kbWillAppearNoificationToken != null)
			{
				this.kbWillAppearNoificationToken.Dispose();
				this.kbWillAppearNoificationToken = null;
			}

			if (this.kbWillDisappearNoificationToken != null)
			{
				this.kbWillDisappearNoificationToken.Dispose();
				this.kbWillDisappearNoificationToken = null;
			}
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			if (beginFrame.Equals(endFrame))
			{
				return;
			}

			UIView.Animate(args.AnimationDuration, 
				() =>
				{
					this.bottomViewConstraint.Constant += (beginFrame.Y - endFrame.Y);
					this.View.LayoutIfNeeded();
//					this.bottomButtonsConstraint.Constant += (beginFrame.Y - endFrame.Y);
//					this.View.LayoutIfNeeded();
				});
		}

		partial void rSliderValueChanged (UISlider sender)
		{
			nfloat value = sender.Value;

//			UIColor newColor = new UIColor((nfloat)value / (nfloat)255, this.selectedColor.Green, this.selectedColor.Blue, this.selectedColor.Alpha);
			UIColor newColor = new UIColor(value, this.selectedColor.Green, this.selectedColor.Blue, this.selectedColor.Alpha);
			this.selectedColor = new CIColor(newColor);

			string rString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((value * 255))) : ((int)Math.Round((value * 255))).ToString();
			this.redTextField.Text = rString;

			this.pickerView.SelectedColor = newColor;
		}

		partial void gSliderValueChanged (UISlider sender)
		{
			nfloat value = sender.Value;

			UIColor newColor = new UIColor(this.selectedColor.Red, value, this.selectedColor.Blue, this.selectedColor.Alpha);

			string gString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((value * 255))) : ((int)Math.Round((value * 255))).ToString();
			this.greenTextField.Text = gString;

			this.selectedColor = new CIColor(newColor);

			this.pickerView.SelectedColor = newColor;
		}

		partial void bSliderValueChanged (UISlider sender)
		{
			nfloat value = sender.Value;

			UIColor newColor = new UIColor(this.selectedColor.Red, this.selectedColor.Green, value, this.selectedColor.Alpha);
			this.selectedColor = new CIColor(newColor);

			string bString = this.isHexSwitch.On ? string.Format("{0:X}", (int)Math.Round((value * 255))) : ((int)Math.Round((value * 255))).ToString();
			this.blueTextField.Text = bString;

			this.pickerView.SelectedColor = newColor;
		}

		partial void isHexValueChanged (UISwitch sender)
		{
			int r = (int)Math.Round((float)this.selectedColor.Red * 255);
			int g = (int)Math.Round((float)this.selectedColor.Green * 255);
			int b = (int)Math.Round((float)this.selectedColor.Blue * 255);

			string rString = sender.On ? string.Format("{0:X}", r) : r.ToString();
			string gString = sender.On ? string.Format("{0:X}", g) : g.ToString();
			string bString = sender.On ? string.Format("{0:X}", b) : b.ToString();

			this.redTextField.Text = rString;
			this.greenTextField.Text = gString;
			this.blueTextField.Text = bString;
		}

		[Export("textField:shouldChangeCharactersInRange:replacementString:")]
		public virtual bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString)
		{
			if (replacementString.Equals(""))
			{
				return true;
			}
			if (replacementString.Length > 1)
			{
				return false;
			}

			if (this.isHexSwitch.On)
			{
				if (textField.Text.Length >= 2)
				{
					return false;
				}
				try
				{
					Convert.ToInt32(replacementString, 16);
				}
				catch
				{
					return false;
				}
			}
			else
			{
				if (textField.Text.Length >= 3)
				{
					return false;
				}
				try
				{
					Convert.ToInt32(replacementString, 10);
				}
				catch
				{
					return false;
				}
			}
			int futureValue;
			try
			{
				string futureString = textField.Text.Insert((int)range.Location, replacementString);
				//Console.Error.WriteLine(futureString);

				futureValue = this.isHexSwitch.On? Convert.ToInt32(futureString, 16) : Convert.ToInt32(futureString, 10);
			}
			catch
			{
				return false;
			}
			if (futureValue < 256)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		partial void rTextValueChanged (UITextField sender)
		{
			int value = 0;
			if (sender.Text.Length > 0)
			{
				value = this.isHexSwitch.On? Convert.ToInt32(sender.Text, 16) : Convert.ToInt32(sender.Text, 10);
			}

			UIColor newColor = new UIColor((nfloat)value / (nfloat)255, this.selectedColor.Green, this.selectedColor.Blue, this.selectedColor.Alpha);
			this.selectedColor = new CIColor(newColor);

			this.pickerView.SelectedColor = newColor;

			this.redSlider.SetValue(value / (float)255, true);
		}

		partial void gTextValueChanged (UITextField sender)
		{
			int value = 0;
			if (sender.Text.Length > 0)
			{
				value = this.isHexSwitch.On? Convert.ToInt32(sender.Text, 16) : Convert.ToInt32(sender.Text, 10);
			}
			UIColor newColor = new UIColor(this.selectedColor.Red, (nfloat)value / (nfloat)255, this.selectedColor.Blue, this.selectedColor.Alpha);
			this.selectedColor = new CIColor(newColor);

			this.pickerView.SelectedColor = newColor;

			this.greenSlider.SetValue(value / (float)255, true);
		}

		partial void bTextValueChanged (UITextField sender)
		{
			int value = 0;
			if (sender.Text.Length > 0)
			{
				value = this.isHexSwitch.On? Convert.ToInt32(sender.Text, 16) : Convert.ToInt32(sender.Text, 10);
			}

			UIColor newColor = new UIColor(this.selectedColor.Red, this.selectedColor.Green, (nfloat)value / (nfloat)255, this.selectedColor.Alpha);
			this.selectedColor = new CIColor(newColor);

			this.pickerView.SelectedColor = newColor;

			this.blueSlider.SetValue(value / (float)255, true);
		}

		partial void closeButtonClick (UIButton sender)
		{
			this.DismissViewController(true, null);
		}

		partial void saveButtonClick (UIButton sender)
		{
			DBColor color = new DBColor((float)this.selectedColor.Red, (float)this.selectedColor.Green, (float)this.selectedColor.Blue);

//			switch (this.mode)
//			{
//				case colorPickerMode.QuestionFontColor:
//				{
//					DBLocalDataStore.GetInstance().SetQuestionFontColor(color);
//
//					break;
//				}
////
//				case colorPickerMode.QuestionBackground:
//				{
//					DBLocalDataStore.GetInstance().SetQuestionBackgroundColor(color);
//
//					break;
//				}
//			}

			if (this.onPickColor != null)
			{
				onPickColor(this.mode, color);
			}
			this.DismissViewController(true, null);
		}
	}
}
