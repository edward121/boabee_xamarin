// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using BoaBeePCL;
using System.Collections.Generic;
using System.Linq;
using CoreGraphics;
using Newtonsoft.Json;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class ContactsMetViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate
	{
		private List<DBlocalContact> filteredContacts = new List<DBlocalContact>();

        private List<DBSyncRequest> syncRequests;
        private List<DBlocalContact> contactsMet;

		private NSObject kbFrameChangeNoificationToken;

		public ContactsMetViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

            this.syncRequests = DBLocalDataStore.GetInstance().getSyncRequests().ToList();
            var allContacts = DBLocalDataStore.GetInstance().GetLocalContacts();
            allContacts.RemoveAll(c => string.IsNullOrWhiteSpace(c.uid));
            this.contactsMet = new List<DBlocalContact>();

            syncRequests.ForEach((r) =>
            {
                SyncContext context = JsonConvert.DeserializeObject<SyncContext>(r.serializedSyncContext);
                if (!context.contacts.isNullOrEmpty())
                {
                    
                    context.contacts.ForEach((met) =>
                    {
                        if (string.IsNullOrWhiteSpace(met.uid))
                        {
                            return;
                        }
                        var contact = allContacts.Find(c => c.uid.Equals(met.uid));
                        if (contact != null)
                        {
                            this.contactsMet.Add(contact);
                        }
                    });
                }
            });

            var comparer = new DBLocalContactsComparer();
            this.contactsMet = this.contactsMet.Distinct(comparer).ToList();

			contactsMetCount.Text = this.contactsMet.Count.ToString() + " CONTACTS MET";

			this.contactsmetTableView.EstimatedRowHeight = 44;
			this.contactsmetTableView.RowHeight = UITableView.AutomaticDimension;

			UIStringAttributes placeholderAttributes = new UIStringAttributes();
			placeholderAttributes.ForegroundColor = UIColor.FromRGB(0x71, 0x71, 0x71);

			NSAttributedString searchPlaceholder = new NSAttributedString (this.searchTextField.Placeholder, placeholderAttributes);

			this.searchTextField.AttributedPlaceholder = searchPlaceholder;
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			UIView.Animate(args.AnimationDuration, 
				() =>
				{
					this.bottomButtonsConstraint.Constant += (beginFrame.Y - endFrame.Y);
					this.View.LayoutIfNeeded();
				});
		}

		partial void searchTextFieldEditingChanged (UITextField sender)
		{
            List<DBlocalContact> matchedContacts = this.contactsMet.Where(s => string.Join(" ", new string[] { s.firstname, s.lastname, s.company }).ToLower().Contains(sender.Text.ToLower())).ToList();

            this.filteredContacts.Clear();
            this.filteredContacts.AddRange(matchedContacts);

            this.contactsmetTableView.ReloadData();
		}

		partial void textFieldEditingDidBegin (UITextField sender)
		{

		}

		partial void textFieldEditingDidEnd (UITextField sender)
		{

		}

		partial void cancelButtonClick (NSObject sender)
		{
			this.NavigationController.PopViewController(true);
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			if (this.searchTextField.Text.Length > 0)
			{
				return this.filteredContacts.Count;
			}
            return this.contactsMet.Count;
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			ContactsMetCell cell = (ContactsMetCell)tableView.DequeueReusableCell("ContactCell", indexPath);
            DBlocalContact contact = null;
			if (this.searchTextField.Text.Length > 0)
			{
				contact = this.filteredContacts[indexPath.Row];
			}
			else
			{
                contact = this.contactsMet[indexPath.Row];
			}
			cell.initWithContact(contact);
			return cell;
		}

		[Export("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow(indexPath, true);

            var contact = (this.searchTextField.Text.Length > 0) ? this.filteredContacts[indexPath.Row] : this.contactsMet[indexPath.Row];

            this.PerformSegue("toContactDetails", NSNumber.FromInt32(contact.Id));
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toContactDetails"))
			{
				ContactOverviewRootViewController target = (ContactOverviewRootViewController)segue.DestinationViewController;

				target.contactID = ((NSNumber)sender).Int32Value;
			}
		}
	}
}
