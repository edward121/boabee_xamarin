// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;

using Foundation;
using UIKit;

using BoaBeePCL;
using System.Linq;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class IdentifyViewController : BoaBeeBasePageContentViewController, IUIAlertViewDelegate
	{
        private List<DBlocalContact> selectedContacts = new List<DBlocalContact>();

		public IdentifyViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.contactsOverviewButton.TitleLabel.TextAlignment = UITextAlignment.Center;
			this.contactsOverviewButton.TitleLabel.LineBreakMode = UILineBreakMode.Clip;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            this.selectedContacts = DBLocalDataStore.GetInstance().GetLocalContacts().Where(c => c.activeContact == true).ToList();
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			int oldContactCount;
			bool success = Int32.TryParse(this.contactsOverviewButton.Title(UIControlState.Normal), out oldContactCount);

			if (success && this.selectedContacts.Count != oldContactCount)
			{
				this.contactsOverviewButton.SetTitle(string.Format(" {0} ", this.selectedContacts.Count.ToString()), UIControlState.Normal);
				UILabel countLabel = this.contactsOverviewButton.TitleLabel;
				ViewBouncer.bounceViewWithScaleFactor(countLabel, 1.35f);
			}
			else
			{
				this.contactsOverviewButton.SetTitle(string.Format(" {0} ", this.selectedContacts.Count.ToString()), UIControlState.Normal);
			}
		}

        partial void crossButtonClicked (UIButton sender)
        {
			UIAlertView alert = new UIAlertView("Warning", "Your current work will be lost.", null, "Cancel", new string[]{"OK"});
			alert.Delegate = this;
			alert.Show();
        }

        partial void tickButtonClicked (UIButton sender)
        {
			BoaBeePageViewController parentViewController = (BoaBeePageViewController)this.ParentViewController;
			parentViewController.displayPage((int)addProspectPagesEnum.InfoPage);
        }

		[Export("alertView:clickedButtonAtIndex:")]
		public void alertClicked(UIAlertView alertview, nint buttonIndex)
		{
			if (buttonIndex == 1)
			{
                OfflineLogic.ClearDataSelected(false);
	
	            this.NavigationController.PopViewController(true);
			}
		}

		partial void overviewButtonClick (UIButton sender)
		{
			if (this.selectedContacts.Count > 0)
			{
				this.PerformSegue("toContactsOverview", null);
			}
		}

        partial void lookUpButtonClick (UIButton sender)
        {
        	this.PerformSegue("toSelectContact", null);
        }

		partial void manualButtonClick (UIButton sender)
		{
			this.PerformSegue("toManualAdd", null);
		}

		partial void badgeButtonClick (UIButton sender)
		{
			this.PerformSegue("toBadgeScanning", null);
		}

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals("toContactsOverview"))
            {
                ContactsOverviewViewController target = (ContactsOverviewViewController)segue.DestinationViewController;
                target.selectedContacts = this.selectedContacts;
            }
        }
	}
}
