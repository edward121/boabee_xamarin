// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using BoaBeePCL;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class KioskWelcomeViewController : UIViewController, IUIAlertViewDelegate
	{
		private NSTimer syncTimer;
		private NSTimer webhookTimer;

		public KioskWelcomeViewController (IntPtr handle) : base (handle)
		{
			
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			DBAppInfo appInfo = DBLocalDataStore.GetInstance().GetAppInfo();
			var documentsDirectory = Environment.GetFolderPath (Environment.SpecialFolder.Personal);

			if (!string.IsNullOrWhiteSpace(appInfo.welcomeImageLocalPath))
			{
				var imagePath = System.IO.Path.Combine(documentsDirectory, appInfo.welcomeImageLocalPath);
				UIImage welcomeImage = UIImage.FromFile(imagePath);
				if (welcomeImage != null)
				{
					this.welcomeImageView.Image = welcomeImage;
				}
				else
				{
					this.welcomeImageView.Image = UIImage.FromBundle("KioskDefaultWelcome");
				}
			}
			else
			{
				this.welcomeImageView.Image = UIImage.FromBundle("KioskDefaultWelcome");
			}
								
			DBKioskSettings kioskSettings = DBLocalDataStore.GetInstance().GetKioskSettings();
			if (kioskSettings == null)
			{
				kioskSettings = new DBKioskSettings();
				kioskSettings.kioskTitle = "Welcome";
				kioskSettings.badgePrinting = false;
				kioskSettings.badgePrintingWebhook = "http://192.168.1.2:8080/rest/api/registree/register";

				DBLocalDataStore.GetInstance().SetKioskSettings(kioskSettings);
			}

            NetworkRequests.onFinishSync += this.syncFinishCallback;
            NetworkRequests.onFailSync += this.syncFailCallback;
            NetworkRequests.onBeginSync += this.syncBeginCallback;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            OfflineLogic.ClearDataSelected();
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

            var syncRequests = DBLocalDataStore.GetInstance().getSyncRequests().Where(s => !s.isSent).ToList();
            if (syncRequests.Any())
            {
                //#warning 60 sec
                this.syncTimer = NSTimer.CreateRepeatingScheduledTimer(60, this.syncTimerAction);
            }
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}
			if (this.webhookTimer != null)
			{
				this.webhookTimer.Invalidate();
				this.webhookTimer = null;
			}
		}

        private void syncBeginCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
        }

        private void syncFailCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
        }

        private void syncFinishCallback()
        {
            if (this.syncTimer != null)
            {
                this.syncTimer.Invalidate();
                this.syncTimer = null;
            }

            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
        }

		private async void syncTimerAction(NSTimer timer)
		{
			Console.Error.WriteLine("Sync timer fired");
            if (await Reachability.isConnected())
            {
                if (this.syncTimer != null)
                {
                    this.syncTimer.Invalidate();
                    this.syncTimer = null;
                }
                try
                {
                    await NetworkRequests.SyncDataServer();
                }
                catch
                {

                }
            }
		}

//		private async void webhookTimerAction(NSTimer timer)
//		{
//			Console.WriteLine("webhook sync timer fired");
//
//			if (await Reachability.isWebhookAvailable())
//			{
//				var newOverviewContactsNotPrinted = DBLocalDataStore.GetInstance().GetOverwievContacts(-1, "new").Where(c=> !c.isSentToWebhook).ToList();
//
//				if (SyncManager.webhookSyncThread == null && newOverviewContactsNotPrinted.Count > 0)
//				{
//					Console.Error.WriteLine("not printed: {0}", newOverviewContactsNotPrinted.Count);
//
//					SyncManager.webhookSyncThread = new Thread(new ParameterizedThreadStart(SyncManager.syncWebhook));
//					SyncManager.webhookSyncThread.Start(newOverviewContactsNotPrinted);
//				}
//
//				this.webhookTimer.Invalidate();
//				this.webhookTimer = null;
//			}
//		}

		[Export("alertView:clickedButtonAtIndex:")]
		public void alertClicked(UIAlertView alertview, nint buttonIndex)
		{
			if (buttonIndex == 0)
			{
				DBUserLoginRequest user = DBLocalDataStore.GetInstance().GetLocalUserInfo();
				if (user.password.Equals(alertview.GetTextField(0).Text))
				{
                    NetworkRequests.onFinishSync -= this.syncFinishCallback;
                    NetworkRequests.onFailSync -= this.syncFailCallback;
                    NetworkRequests.onBeginSync -= this.syncBeginCallback;

                    this.DismissViewController(true, null);
				}
				else
				{
					new UIAlertView("Error", "Incorrect password", null, "OK", null).Show();
				}
			}
		}

		partial void invisibleExitButtonClicked (UIButton sender)
		{
			UIAlertView passwordAlert = new UIAlertView(null, "Please enter your password to exit kiosk", null, "OK", new string[]{"Cancel"});

            passwordAlert.AlertViewStyle = UIAlertViewStyle.SecureTextInput;
			passwordAlert.Delegate = this;

            #if DEBUG
            {
                DBUserLoginRequest user = DBLocalDataStore.GetInstance().GetLocalUserInfo();
                passwordAlert.GetTextField(0).Text = user.password;
            }
            #endif

			passwordAlert.Show();

			//this.DismissViewController(true, null);
		}

		partial void imageTapped (UITapGestureRecognizer sender)
		{
			this.PerformSegue("toKioskEmail", null);
		}
	}
}
