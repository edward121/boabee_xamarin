// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using UIKit;

using BoaBeePCL;
using System.Collections.Generic;
using System.Threading;
using BoaBeeLogic;
using Newtonsoft.Json;

namespace BoaBee.iOS
{
	public partial class MyWorkViewController : UIViewController
	{
        private List<DBSyncRequest> syncRequests;

		private NSTimer syncTimer;
        private NSTimer cloudBlinkTimer;

		public MyWorkViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

			Thread.Sleep(350);

            DBSelectProfile selectedProfile = DBLocalDataStore.GetInstance().GetSelectProfile();

            this.appNameLabel.Text = selectedProfile.displayName;

            var validAnswersCount = DBLocalDataStore.GetInstance().getAnswers().Count(a => OfflineLogic.isAnswerValid(a.answer));
            var selectedFilesCount = DBLocalDataStore.GetInstance().GetAllLocalFiles().Count(f => f.activeFile);
            var selectedContactsCount = DBLocalDataStore.GetInstance().GetLocalContacts().Count(c => c.activeContact);

            if (selectedContactsCount + validAnswersCount + selectedFilesCount > 0)
            {
                UIAlertController alert = UIAlertController.Create(null, "You still have ongoing work. Lets continue!", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Yes", UIAlertActionStyle.Default, (UIAlertAction obj) =>
                {
                    NSNumber lastScreenNumber = ((NSNumber)NSUserDefaults.StandardUserDefaults.ValueForKey((NSString)"ProspectLastScreen"));
                    if (lastScreenNumber != null)
                    {
                        ProspectLastScreen last = (ProspectLastScreen)lastScreenNumber.Int32Value;
                        switch (last)
                        {
                            case ProspectLastScreen.Scan:
                                {
                                    Console.Error.WriteLine("Was on scan");
                                    this.PerformSegue("ToAddProspect", null);
                                    break;
                                }
                            case ProspectLastScreen.Questions:
                                {
                                    Console.Error.WriteLine("Was on questions");
                                    this.PerformSegue("ToQuestionsProspect", null);
                                    break;
                                }
                            case ProspectLastScreen.Share:
                                {
                                    Console.Error.WriteLine("Was on share");
                                    this.PerformSegue("ToShareProspect", null);
                                    break;
                                }
                        }
                    }
                    else
                    {
                        this.PerformSegue("ToAddProspect", null);
                    }
                }));
                this.PresentViewController(alert, true, null);
            }
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            NetworkRequests.onFinishSync += this.syncFinishCallback;
            NetworkRequests.onFailSync += this.syncFailCallback;
            NetworkRequests.onBeginSync += this.syncBeginCallback;

            this.updateView();
        }

        public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

            NetworkRequests.onFinishSync -= this.syncFinishCallback;
            NetworkRequests.onFailSync -= this.syncFailCallback;
            NetworkRequests.onBeginSync -= this.syncBeginCallback;

			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}
            if (this.cloudBlinkTimer != null)
            {
                this.cloudBlinkTimer.Invalidate();
                this.cloudBlinkTimer = null;
            }
		}

		private async void timerAction(NSTimer timer)
		{
			Console.Error.WriteLine("Sync timer fired");

            if (await Reachability.isConnected())
            {
                this.syncTimer.Invalidate();
                this.syncTimer = null;

                await NetworkRequests.SyncDataServer();
            }
		}

        private void syncBeginCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
        }

        private void syncFailCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
        }

		private void syncFinishCallback()
		{
			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}

            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
			this.updateView();
		}

		private void updateView()
		{
            this.syncRequests = DBLocalDataStore.GetInstance().getSyncRequests().ToList();

			this.InvokeOnMainThread(async () =>
            {
                if (syncRequests.Any(r => !r.isSent))
                {
                    this.settingsButton.SetBackgroundImage(UIImage.FromBundle("CloudRedNoFrame"), UIControlState.Normal);

                    if (this.cloudBlinkTimer == null)
                    {
                        this.cloudBlinkTimer = NSTimer.CreateRepeatingScheduledTimer(2.5, (obj) =>
                        {
                            Console.Error.WriteLine("Blink!");
                            ViewBouncer.bounceViewWithScaleFactor(this.settingsButton, 1.4f, 2f);
                        });
                    }
                }
                else
                {
                    this.settingsButton.SetBackgroundImage(UIImage.FromBundle("SettingsButtonNoFrame"), UIControlState.Normal);
                    this.settingsButton.Alpha = 1;
                    if (this.cloudBlinkTimer != null)
                    {
                        this.cloudBlinkTimer.Invalidate();
                        this.cloudBlinkTimer.Dispose();
                        this.cloudBlinkTimer = null;
                    }
                }

                var allContacts = DBLocalDataStore.GetInstance().GetLocalContacts();
                allContacts.RemoveAll(c => string.IsNullOrWhiteSpace(c.uid));
                var contactsMet = new List<DBlocalContact>();
                int formsCount = 0;
                int shareCount = 0;
                syncRequests.ForEach((r) =>
                {
                    SyncContext context = JsonConvert.DeserializeObject<SyncContext>(r.serializedSyncContext);
                    if (!context.contacts.isNullOrEmpty())
                    {
                        context.contacts.ForEach((met) =>
                        {
                            if (string.IsNullOrWhiteSpace(met.uid))
                            {
                                return;
                            }
                            var contact = allContacts.Find(c => c.uid.Equals(met.uid));
                            if (contact != null)
                            {
                                contactsMet.Add(contact);
                            }
                        });
                    }
                    if (!context.forms.isNullOrEmpty())
                    {
                        formsCount += context.forms.Count;
                    }
                    if (!context.orders.isNullOrEmpty())
                    {
                        shareCount += context.orders.Where(o => o.orderLine.Count > 0).Count();
                    }
                });

                var comparer = new DBLocalContactsComparer();
                this.contactsMetButton.SetTitle(contactsMet.Distinct(comparer).Count().ToString(), UIControlState.Normal);
                this.infoSheetsButton.SetTitle(formsCount.ToString(), UIControlState.Normal);
                this.emailsSentButton.SetTitle(shareCount.ToString(), UIControlState.Normal);

                if (syncRequests.Any(r => !r.isSent))
                {
                    if (await Reachability.isConnected())
                    {
                        await NetworkRequests.SyncDataServer();
                    }
                    else
                    {
                        if (this.syncTimer == null)
                        {
                            this.syncTimer = NSTimer.CreateRepeatingScheduledTimer(60, this.timerAction);
                        }
                    }
                }
            });
		}

		partial void settingsButtonClicked (UIButton sender)
		{
			
			this.PerformSegue("toSettings", null);
		}

        partial void addProspectButtonClicked (UIButton sender)
        {
            this.PerformSegue("ToAddProspect", null);
        }

		partial void contactsMetButtonPressed (UIButton sender)
		{
			this.PerformSegue("ContactsMet", null);
		}

		partial void emailsSentButtonClicked (UIKit.UIButton sender)
		{
			this.PerformSegue("EmailsSent", null);
		}

		partial void infoSheetsButtonClicked (UIKit.UIButton sender)
		{
			this.PerformSegue("InfoSheets", null);
		}
	}
}
