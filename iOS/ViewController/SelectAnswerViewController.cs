// This file has been autogenerated from a class added in the UI designer.

using System;

using System.Collections.Generic;

using Foundation;
using UIKit;

using BoaBeePCL;

namespace BoaBee.iOS
{
	public partial class SelectAnswerViewController : KioskBaseViewController, IUITableViewDataSource, IUITableViewDelegate
	{
		public IAnswerSelection caller;

        public NSDictionary questionDictionary;
        private List<string> optionsArray = new List<string>();
        private NSNumber questionNumber;

        private DBAppInfo appInfo;

		public SelectAnswerViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            string options = this.questionDictionary["options"].ToString();
            this.questionNumber = (NSNumber)this.questionDictionary["questionNumber"];

            this.optionsArray = new List<string>(options.Split(new string[] {"_,_"}, StringSplitOptions.RemoveEmptyEntries));
            this.questionLabel.Text = this.questionDictionary["question"].ToString();

            this.answersTableView.EstimatedRowHeight = 44;
            this.answersTableView.RowHeight = UITableView.AutomaticDimension;

			this.appInfo = DBLocalDataStore.GetInstance().GetAppInfo();
			if (this.appInfo != null && this.appInfo.appType.ToLower().Equals("kiosk"))
			{
				//Console.Error.WriteLine("kiosk");
				this.questionLabel.TextColor = UIColor.FromRGB(this.questionFontColor.red, this.questionFontColor.green, this.questionFontColor.blue);
				this.questionLabel.Font = this.questionLabel.Font.WithSize(this.questionFontSize);
				this.mainContentView.BackgroundColor = UIColor.FromRGB(this.questionBackgroundColor.red, this.questionBackgroundColor.green, this.questionBackgroundColor.blue);
				this.bottomView.BackgroundColor = UIColor.FromRGB(this.answerBackgroundColor.red, this.answerBackgroundColor.green, this.answerBackgroundColor.blue);

				this.answersTableView.BackgroundColor = UIColor.FromRGB(this.answerBackgroundColor.red, this.answerBackgroundColor.green, this.answerBackgroundColor.blue);
				//this.answersTableView.SeparatorColor = UIColor.FromRGB(this.answerFontColor.red, this.answerFontColor.green, this.answerFontColor.blue);
			}
			else
			{
				Console.Error.WriteLine("not kiosk");
			}
        }

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

//			this.answersTableView.ContentInset = new UIEdgeInsets(0, 0, 30, 0);
		}

        partial void backButtonClick (UIButton sender)
        {
            this.NavigationController.PopViewController(true);
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return this.optionsArray.Count;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            AnswerCell cell = (AnswerCell)tableView.DequeueReusableCell("cell", indexPath);
			if (this.appInfo != null && this.appInfo.appType.ToLower().Equals("kiosk"))
			{
				cell.initWithOption(this.optionsArray[indexPath.Row], this.answerFontSize, this.answerFontColor, this.answerBackgroundColor);
			}
			else
			{
				cell.initWithOption(this.optionsArray[indexPath.Row]);
			}

            return cell;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);

            NSDictionary userInfo = NSDictionary.FromObjectsAndKeys(new NSObject[] {(NSString)this.optionsArray[indexPath.Row], this.questionNumber }, new NSObject[] {(NSString)"selectedOption", (NSString)"questionNumber"});

			this.caller.didSelectAnswer(userInfo);
            this.NavigationController.PopViewController(true);
        }
	}
}
