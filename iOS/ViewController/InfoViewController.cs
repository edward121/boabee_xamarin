// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;

using Foundation;
using UIKit;

using CoreGraphics;

using BoaBeePCL;
using System.Linq;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class InfoViewController : BoaBeeBasePageContentViewController, IUITableViewDataSource, IUITableViewDelegate, IUITextViewDelegate, IAnswerSelection
	{
		private List<DBQuestion> questions = new List<DBQuestion>();
        private List<DBAnswer> answers = new List<DBAnswer>();

        private NSObject kbFrameChangeNoificationToken;
		private NSObject kbWillAppearNoificationToken;
		private NSObject kbWillDisappearNoificationToken;

        private UITextView currentTextView;
		private UITextField currentTextField;

        private List<DBlocalContact> selectedContacts = new List<DBlocalContact>();

		public InfoViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NSUserDefaults.StandardUserDefaults.SetValueForKey(NSNumber.FromInt32((int)ProspectLastScreen.Questions), (NSString)"ProspectLastScreen");
            NSUserDefaults.StandardUserDefaults.Synchronize();

            this.questionsTableView.EstimatedRowHeight = 44;
            this.questionsTableView.RowHeight = UITableView.AutomaticDimension;

            string formDefinitionUUID = DBLocalDataStore.GetInstance().GetSelectedQuestionPosition();

            this.questions = DBLocalDataStore.GetInstance().GetLocalQuestions(formDefinitionUUID);

            this.answers = DBLocalDataStore.GetInstance().getAnswers();
            if (this.answers == null || this.answers.Count == 0)
            {
                DBLocalDataStore.GetInstance().resetAnswers();
                this.answers = DBLocalDataStore.GetInstance().getAnswers();
            }
            if (this.answers.Any(a => string.IsNullOrWhiteSpace(a.question_name)))
            {
                DBLocalDataStore.GetInstance().resetAnswers();
                this.answers = DBLocalDataStore.GetInstance().getAnswers();
            }

			if (this.questions.Count == 0)
			{
				this.noQuestionsLabel.Hidden = false;
				this.questionsTableView.Hidden = true;
			}
			else
			{
				this.noQuestionsLabel.Hidden = true;
				this.questionsTableView.Hidden = false;
			}
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

			this.questionsTableView.ReloadData();
        }

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

//			this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);

			this.kbWillAppearNoificationToken = UIKeyboard.Notifications.ObserveWillShow(kbWillAppearCallback);
			this.kbWillDisappearNoificationToken = UIKeyboard.Notifications.ObserveWillHide(kbWillDisappearCallback);
		}

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}

			if (this.kbWillAppearNoificationToken != null)
			{
				this.kbWillAppearNoificationToken.Dispose();
				this.kbWillAppearNoificationToken = null;
			}

			if (this.kbWillDisappearNoificationToken != null)
			{
				this.kbWillDisappearNoificationToken.Dispose();
				this.kbWillDisappearNoificationToken = null;
			}
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            if (this.currentTextView != null)
            {
                this.currentTextView.ResignFirstResponder();
                this.currentTextView = null;
            }

            this.bottomButtonsConstraint.Constant = 0;
            this.View.LayoutIfNeeded();
        }

        partial void crossButtonClick(UIButton sender)
        {
            UIAlertController alert = UIAlertController.Create("Warning", "Your current work will be lost.", UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, null));
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Destructive, (obj) =>
            {
                OfflineLogic.ClearDataSelected(false);

                this.DismissViewController(true, null);
            }));

            Alert.PresentAlert(alert, true, null);
        }

		partial void overviewButtonClick (UIButton sender)
		{
		}

		partial void tickButtonClick (UIButton sender)
		{
		}

        partial void nextButtonClick(UIButton sender)
        {
            if (this.currentTextView != null)
            {
                this.EditingEnded(this.currentTextView);
            }

            int answeredQuestionsCount = this.answers.Count(a => OfflineLogic.isAnswerValid(a.answer));
            bool validAnswers = true;
            for (int index = 0; index < this.questions.Count && answeredQuestionsCount > 0; index++)
            {
                if (this.questions[index].required && !OfflineLogic.isAnswerValid(this.answers[index].answer))
                {
                    Console.Error.WriteLine("INVALID ANSWERS, index = {0}", index);
                    validAnswers = false;
                    break;
                }
            }

            if (validAnswers)
            {
                if (DBLocalDataStore.GetInstance().GetAllLocalFiles().Count > 0)
                {
                    this.PerformSegue("toShare", null);
                }
                else
                {
                    try
                    {
                        OfflineLogic.prepareSync();

                        this.DismissViewController(true, null);
                    }
                    catch (Exception e)
                    {
                        new UIAlertView("Error", e.Message, null, "OK", null).Show();
                    }
                }
            }
            else
            {
                UIAlertController alert = UIAlertController.Create("Error", "Not all mandatory questions are completed", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                Alert.PresentAlert(alert, true, null);
            }
        }

		private void kbWillAppearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect endFrame = args.FrameEnd;

			Console.Error.WriteLine("kbWillAppear end frame {0}", endFrame.ToString());
			UIView.Animate(args.AnimationDuration,
				() =>
				{
//					this.bottomButtonsConstraint.Constant = endFrame.Height;
					this.bottomButtonsConstraint.Constant = this.NavigationController.View.Frame.Height - endFrame.Y;
					this.View.LayoutIfNeeded();
				}, () =>
				{
					if (this.currentTextView != null)
					{
						CGRect cellRect = this.questionsTableView.RectForSection(this.currentTextView.Tag);
						this.questionsTableView.ScrollRectToVisible(cellRect, true);
					}
				});
		}

		private void kbWillDisappearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;

			Console.Error.WriteLine("kbWillDisappear begin frame {0}", beginFrame.ToString());

			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomButtonsConstraint.Constant = 0;
					this.View.LayoutIfNeeded();
				});
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
        {
//            CGRect beginFrame = args.FrameBegin;
//            CGRect endFrame = args.FrameEnd;
//
//			if (beginFrame.Equals(endFrame))
//			{
//				return;
//			}
//
//            UIView.Animate(args.AnimationDuration, 
//                () =>
//                {
//                    this.bottomButtonsConstraint.Constant += (beginFrame.Y - endFrame.Y);
//                    this.View.LayoutIfNeeded();
//                }, () =>
//                {
//                    if (this.currentTextView != null)
//                    {
//                        CGRect cellRect = this.questionsTableView.RectForSection(this.currentTextView.Tag);
//                        this.questionsTableView.ScrollRectToVisible(cellRect, true);
//                    }
//
//                });
        }

		public void didSelectAnswer(NSDictionary userInfo)
        {
            string selectedOption = userInfo[(NSString)"selectedOption"].ToString();
            int questionNumber = ((NSNumber)userInfo["questionNumber"]).Int32Value;

            DBQuestion question = this.questions[questionNumber];

            var answer = this.answers.Find(a => a.question_name.Equals(question.name));
            answer.answer = selectedOption;
            DBLocalDataStore.GetInstance().updateAnswer(answer);
        }

        [Export("textViewShouldBeginEditing:")]
        public bool ShouldBeginEditing(UITextView textView)
        {
            this.currentTextView = textView;

            return true;
        }

		[Export("textFieldShouldBeginEditing:")]
		public bool ShouldBeginEditing(UITextField textField)
		{
			this.currentTextField = textField;

			return true;
		}

        [Export("textViewDidEndEditing:")]
        public void EditingEnded(UITextView textView)
        {
			NSDictionary userInfo = NSDictionary.FromObjectsAndKeys(new NSObject[] { (NSString)textView.Text, NSNumber.FromNInt(textView.Tag) }, new NSObject[] {(NSString)"selectedOption", (NSString)"questionNumber"});
			this.didSelectAnswer(userInfo);
        }

		[Export("textFieldDidEndEditing:")]
		public void EditingEnded(UITextField textField)
		{
			NSDictionary userInfo = NSDictionary.FromObjectsAndKeys(new NSObject[] { (NSString)textField.Text, NSNumber.FromNInt(textField.Tag) }, new NSObject[] { (NSString)"selectedOption", (NSString)"questionNumber" });
			this.didSelectAnswer(userInfo);
		}

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return this.questions.Count;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return 2;
        }

        [Export("tableView:viewForFooterInSection:")]
        public UIView GetViewForFooter(UITableView tableView, nint section)
        {
            return null;
        }

        [Export("tableView:viewForHeaderInSection:")]
        public UIView GetViewForHeader(UITableView tableView, nint section)
        {
            return null;
        }

        [Export("tableView:heightForFooterInSection:")]
        public nfloat GetHeightForFooter(UITableView tableView, nint section)
        {
            return new nfloat(0.001);
        }

        [Export("tableView:heightForHeaderInSection:")]
        public nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
            return new nfloat(0.001);
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = null;
            DBQuestion questionForCell = this.questions[(int)indexPath.Section];

            switch (indexPath.Row)
            {
                case 0:
                {
                    cell = (QuestionCell)tableView.DequeueReusableCell("questionCell",indexPath);
                    ((QuestionCell)cell).initWithQuestion(questionForCell);
                    Console.Error.WriteLine("Question name for question '{0}' at row {1} is {2}", questionForCell.question, indexPath.Section, questionForCell.name);
                }
                break;
                case 1:
                {
                    string answersOptions = questionForCell.options;
                    DBAnswer answer = this.answers.Find(a => a.question_name.Equals(questionForCell.name));
                    Console.Error.WriteLine("Answer is {0} for question name {1}", answer.answer, answer.question_name);
                    if (string.IsNullOrEmpty(answersOptions))
                    {
                        cell = tableView.DequeueReusableCell("answerTypingCell", indexPath);

                        ((AnswerTypingCell)cell).initWithAnswerAndTag(answer.answer, indexPath.Section);
						UITextView cellTextView = ((AnswerTypingCell)cell).getTextView();
						//UITextField cellTextField = ((AnswerTypingCell)cell).getTextField();
						
						UIDatePicker datePicker = new UIDatePicker();
						datePicker.BackgroundColor = UIColor.FromRGB(0x1B, 0x1B, 0x1B);
						datePicker.SetValueForKey(UIColor.FromRGB(0xED, 0xCD, 0x00), (NSString)"textColor");
						
						switch (questionForCell.type.ToLower())
						{
							case "datetime":
							{
								datePicker.Mode = UIDatePickerMode.DateAndTime;
								try
								{
									datePicker.SetDate(DateFormatter.parseDateTime(cellTextView.Text), false);
								}
								catch{}

								datePicker.ValueChanged += (object sender, EventArgs e) => 
								{
									string formattedDate = DateFormatter.formatDateTime(datePicker.Date);

									cellTextView.Text = formattedDate;
									//cellTextField.Text = formattedDate;
								};
								
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								cellTextView.InputView = datePicker;

								//cellTextField.KeyboardAppearance = UIKeyboardAppearance.Light;
								//cellTextField.InputView = datePicker;

								break;
							}
							case "date":
							{
								datePicker.Mode = UIDatePickerMode.Date;
								try
								{
									datePicker.SetDate(DateFormatter.parseDate(cellTextView.Text), false);
								}
								catch{}

								datePicker.ValueChanged += (object sender, EventArgs e) => 
								{
									string formattedDate = DateFormatter.formatDate(datePicker.Date);

									cellTextView.Text = formattedDate;
									//cellTextField.Text = formattedDate;
								};
											
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								cellTextView.InputView = datePicker;

								//cellTextField.KeyboardAppearance = UIKeyboardAppearance.Light;
								//cellTextField.InputView = datePicker;
								break;
							}
							case "integer":
							{
								cellTextView.KeyboardType = UIKeyboardType.NumberPad;
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
								cellTextView.InputView = null;

								//cellTextField.KeyboardType = UIKeyboardType.NumberPad;
								//cellTextField.KeyboardAppearance = UIKeyboardAppearance.Dark;
								//cellTextField.InputView = null;
								break;
							}
							case "string":
							{
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
								cellTextView.KeyboardType = UIKeyboardType.Default;
								cellTextView.InputView = null;

								//cellTextField.KeyboardAppearance = UIKeyboardAppearance.Dark;
								//cellTextField.KeyboardType = UIKeyboardType.Default;
								//cellTextField.InputView = null;
								break;
							}
							default:
							{
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
								cellTextView.KeyboardType = UIKeyboardType.Default;
								cellTextView.InputView = null;

								//cellTextField.KeyboardAppearance = UIKeyboardAppearance.Dark;
								//cellTextField.KeyboardType = UIKeyboardType.Default;
								//cellTextField.InputView = null;
								break;
							}
						}
                    }
                    else
                    {
                        cell = tableView.DequeueReusableCell("answerSelectionCell",indexPath);

                        string selectedOption = answer.answer;

                        ((AnswerSelectionCell)cell).initWithOption(selectedOption);
                    }
                }
                break;
            }
            return cell;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            tableView.DeselectRow(indexPath, true);

            if (this.currentTextView != null)
            {
                this.currentTextView.ResignFirstResponder();
                this.currentTextView = null;
            }

			//if (this.currentTextField != null)
			//{
			//	this.currentTextField.ResignFirstResponder();
			//	this.currentTextField = null;
			//}

            if (indexPath.Row == 1)
            {
                DBQuestion question = this.questions[(int)indexPath.Section];

				if (question.options.Length > 0)
				{
					NSDictionary questionDictionary = NSDictionary.FromObjectsAndKeys(new object[] { question.question, question.options, NSNumber.FromInt32(indexPath.Section) }, new object[] { "question", "options", "questionNumber" });

					this.PerformSegue("toSelectAnswer", questionDictionary);
				}
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals("toSelectAnswer"))
            {
                SelectAnswerViewController target = (SelectAnswerViewController)segue.DestinationViewController;
                target.questionDictionary = (NSDictionary)sender;
				target.caller = this;
            }
            if (segue.Identifier.Equals("toContactsOverview"))
            {
                ContactsOverviewViewController target = (ContactsOverviewViewController)segue.DestinationViewController;
                target.selectedContacts = this.selectedContacts;
            }
        }
	}
}
