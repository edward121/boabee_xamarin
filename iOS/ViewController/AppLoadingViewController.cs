// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using BoaBeePCL;
using Newtonsoft.Json;

using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using BoaBeeLogic;
using System.Threading.Tasks;

namespace BoaBee.iOS
{
	public partial class AppLoadingViewController : UIViewController, IUIAlertViewDelegate
	{
		private NSObject notificationProgressToken = null;
		private NSObject notificationFinishToken = null;
		private NSObject notificationFailToken = null;

		private string libraryPath;
		private List<FileInfo> filesToDelete;

		private bool isVisible;

//		private bool welcomeImageFinished = false;
//		private bool finishImageFinished = false;

		public AppLoadingViewController (IntPtr handle) : base (handle)
		{
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

            this.isVisible = true;

			this.filesToDelete = new List<FileInfo>();

			this.libraryPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);

			notificationProgressToken = NSNotificationCenter.DefaultCenter.AddObserver ((NSString)"AppLoadingProgressDidUpdate", progressDidUpdate);
			notificationFinishToken = NSNotificationCenter.DefaultCenter.AddObserver ((NSString)"AppLoadingDidFinish", loadingDidFinish);
			notificationFailToken = NSNotificationCenter.DefaultCenter.AddObserver((NSString)"AppLoadingDidFail", loadingDidFail);

			this.logoFadeOut ();

			NSUserDefaults.StandardUserDefaults.SetBool(false, "AlLFilesDownloaded");
			NSUserDefaults.StandardUserDefaults.Synchronize();

            await Task.Run(() =>
            {
                this.updateApp();
            });

//			this.clearCache();
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			if (notificationProgressToken != null)
			{
				notificationProgressToken.Dispose();
				notificationProgressToken = null;
			}
			if (notificationFinishToken != null)
			{
				notificationFinishToken.Dispose();
				notificationFinishToken = null;
			}
			if (notificationFailToken != null)
			{
				notificationFailToken.Dispose();
				notificationFailToken = null;
			}

            this.isVisible = false;
		}

		private void progressDidUpdate(NSNotification notification)
		{
			string newValue = notification.UserInfo.ObjectForKey ((NSString)"NewValue").ToString();

			this.InvokeOnMainThread (() =>
			{
				this.percentLabel.Text = newValue;
			});
		}

		private void loadingDidFail(NSNotification notification)
		{
			string error = notification.UserInfo["error"].ToString();

            DBLocalDataStore.GetInstance().ClearSelectProfile();

			new UIAlertView("Error", error, null, "Ok", null).Show();

			var navigationController = (UINavigationController)this.PresentingViewController;
			SelectAppViewController selectAppViewController = ((SelectAppViewController)navigationController.TopViewController);

			selectAppViewController.shouldUpdateProfiles = false;

			this.DismissViewController(true, null);
		}

		private void loadingDidFinish(NSNotification notification)
		{
			NSUserDefaults.StandardUserDefaults.SetBool(true, "AlLFilesDownloaded");
			NSUserDefaults.StandardUserDefaults.Synchronize();

			var defaultForm = DBLocalDataStore.GetInstance().GetLocalDefaultFormDefinition();
			var appInfo = DBLocalDataStore.GetInstance().GetAppInfo();

			this.InvokeOnMainThread (() =>
			{
				if (defaultForm != null)
				{
					DBLocalDataStore.GetInstance().SetSelectedFormDefinitions(defaultForm.uuid);

                    DBLocalDataStore.GetInstance().resetAnswers();

                    //#warning temporary disabled kiosk
					if(appInfo.appType.Equals("kiosk"))
					{
						DBLocalDataStore.GetInstance().ClearKioskSettings();
						this.PerformSegue("toKiosk", null);
					}
					else
					{
						this.PerformSegue("toMyWork", null);
					}


                    //this.PerformSegue("toMyWork", null);
				}
				else
				{
					if(appInfo.appType.Equals("kiosk"))
					{
						DBLocalDataStore.GetInstance().ClearKioskSettings();
						this.PerformSegue("toKiosk", null);
					}
					else
					{
						this.PerformSegue("toSelectQuestions", null);
					}
				}
			});
		}
			
		private void logoFadeOut()
		{
			UIView.Animate(0.5, 
				() => { this.blinkingLogo.Alpha = (nfloat)0.2; },
				() => { logoFadeIn(); });
		}

		private void logoFadeIn()
		{
            if (this.isVisible)
            {
                UIView.Animate(0.5,
                    () => { this.blinkingLogo.Alpha = (nfloat)1; },
                    () => { logoFadeOut(); });
            }
		}

		private void clearCache()
		{
			var currentAppFiles = DBLocalDataStore.GetInstance().GetOnlyLocalFiles(true);
			int currentAppFilesCount = currentAppFiles.Count;
			Console.Error.WriteLine("Current app contains {0} files", currentAppFilesCount);

			ulong unusedFilesSize = 0;
			string DBPath = System.IO.Path.GetFileName(DBLocalDataStore.GetInstance().GetPath());

			System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(this.libraryPath);
			var directoryContentsInfo = di.GetFiles();

			foreach (var fileInfo in directoryContentsInfo)
			{
				string fullPath = fileInfo.FullName;
				if (fileInfo.Name.Contains(DBPath))
				{
					Console.Error.WriteLine("Skipping DB file");
					continue;
				}
				if (currentAppFiles.Any(s=> s.localpath.Equals(fileInfo.Name)))
				{
					Console.Error.WriteLine("Skipping current app's file");
					continue;
				}

				unusedFilesSize += (ulong)fileInfo.Length;
				this.filesToDelete.Add(fileInfo);
			}

			int unusedFilesSizeInMB = (int)(unusedFilesSize / 1024 / 1024);
			bool shouldAskToDelete = !NSUserDefaults.StandardUserDefaults.BoolForKey("NeverAskToClearCache");

			if (unusedFilesSizeInMB >= 50 && shouldAskToDelete)
			{
				UIAlertView alert = new UIAlertView(null, string.Format("Your cached files size is {0} MB.\nDelete them?", unusedFilesSizeInMB), null, null, new string[]{ "Yes", "No", "No, and never ask again" });
				alert.Delegate = this;
				alert.Show();
			}
		}

		[Export("alertView:clickedButtonAtIndex:")]
		public void alertClicked(UIAlertView alertview, nint buttonIndex)
		{
			switch (buttonIndex)
			{
				case 0: //Yes
					{
						foreach (var file in this.filesToDelete)
						{
							file.Delete();
						}
						break;
					}
				case 1: //No
					{

						break;
					}
				case 2: //Never ask
					{
						NSUserDefaults.StandardUserDefaults.SetBool(true, "NeverAskToClearCache");
						NSUserDefaults.StandardUserDefaults.Synchronize();
						break;
					}
			}
		}

		private async void updateApp()
		{
			//set 0%
			NSNotificationCenter.DefaultCenter.PostNotificationName ("AppLoadingProgressDidUpdate", null, NSDictionary.FromObjectAndKey((NSString)"0%", (NSString)"NewValue"));

            try
            {
                //Get files for app
                bool isKiosk = false;
                bool success = false;
                await NetworkRequests.GetFilesAndForms((success_, message, isKiosk_) =>
                {
                    success = success_;
                    this.InvokeOnMainThread(() =>
                    {
                        if (success_)
                        {
                            Console.Error.WriteLine(message);
                            isKiosk = isKiosk_;
                            NSNotificationCenter.DefaultCenter.PostNotificationName("AppLoadingProgressDidUpdate", null, NSDictionary.FromObjectAndKey((NSString)"25%", (NSString)"NewValue"));
                        }
                        else
                        {
                            NSNotificationCenter.DefaultCenter.PostNotificationName("AppLoadingDidFail", null, NSDictionary.FromObjectAndKey((NSString)message, (NSString)"error"));
                        }
                    });
                });
                if (!success)
                {
                    return;
                }

                //get contacts for app
                success = false;
                await NetworkRequests.GetContacts((success_, message) =>
                {
                    success = success_;
                    this.InvokeOnMainThread(() =>
                    {
                        if (success_)
                        {
                            Console.Error.WriteLine(message);

                            NSNotificationCenter.DefaultCenter.PostNotificationName("AppLoadingProgressDidUpdate", null, NSDictionary.FromObjectAndKey((NSString)"50%", (NSString)"NewValue"));
                        }
                        else
                        {
                            NSNotificationCenter.DefaultCenter.PostNotificationName("AppLoadingDidFail", null, NSDictionary.FromObjectAndKey((NSString)message, (NSString)"error"));
                        }
                    });
                });
                if (!success)
                {
                    return;
                }

                DownloadManager.downloadFilesForApp(Guid.NewGuid().ToString(), isKiosk);
            }
            catch (Exception e)
            {
                this.InvokeOnMainThread(() =>
                {
                    UIAlertController alertController = UIAlertController.Create("Error:", e.Message, UIAlertControllerStyle.Alert);
                    alertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, (UIAlertAction obj) =>
                    {
                        DBLocalDataStore.GetInstance().ClearSelectProfile();
                        this.DismissViewController(true, null);
                    }));

                    this.PresentViewController(alertController, true, null);
                });
            }
		}
	}
}
