// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using BoaBeePCL;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using BoaBeeLogic;
using System.Threading.Tasks;

namespace BoaBee.iOS
{
	public partial class SettingsViewController : UIViewController, IUIAlertViewDelegate
	{
		public SettingsViewController (IntPtr handle) : base (handle)
		{
		}

		private NSTimer syncTimer;
        private DBUserLoginRequest user = null;

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

            DBSelectProfile selectedProfile = DBLocalDataStore.GetInstance ().GetSelectProfile ();
            this.user = DBLocalDataStore.GetInstance().GetLocalUserInfo();

            this.appNameLabel.Text = selectedProfile.displayName;
            this.userNameLabel.Text = this.user.username;
        }

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            NetworkRequests.onFinishSync += this.syncFinishCallback;
            NetworkRequests.onFailSync += this.syncFailCallback;
            NetworkRequests.onBeginSync += this.syncBeginCallback;

			this.updateView();

            if (this.isPasswordInvalid())
            {
                this.presentIncorrectPasswordAlert();
            }
		}

        private bool isPasswordInvalid()
        {
            this.user = DBLocalDataStore.GetInstance().GetLocalUserInfo();
            return this.user.invalidPassword;
        }

        private void presentIncorrectPasswordAlert()
        {
            UIAlertController alert = UIAlertController.Create(null, "Your password has been changed. Your work will NOT be synced until the most recent password is entered", UIAlertControllerStyle.Alert);

            UIAlertAction LaterAction = UIAlertAction.Create("Later", UIAlertActionStyle.Default, null);
            UIAlertAction OKAction = UIAlertAction.Create("OK", UIAlertActionStyle.Default, async (UIAlertAction obj) =>
            {
                UITextField newPasswordTextField = alert.TextFields[0];
                this.user.password = newPasswordTextField.Text;
                this.user.invalidPassword = false;
                DBLocalDataStore.GetInstance().AddUserInfo(this.user);

                await this.syncManually();
            });
            OKAction.Enabled = false;

            alert.AddAction(LaterAction);
            alert.AddAction(OKAction);

            alert.AddTextField((textField) =>
            {
                textField.SecureTextEntry = true;
                textField.EditingChanged += (object sender, EventArgs e) =>
                {
                    int stringLength = ((UITextField)sender).Text.Length;
                    if (stringLength > 0)
                    {
                        OKAction.Enabled = true;
                    }
                    else
                    {
                        OKAction.Enabled = false;
                    }
                };
            });

            Alert.PresentAlert(alert, true, null);
        }

		private void updateView()
		{
			var unsentSyncRequests = DBLocalDataStore.GetInstance().getSyncRequests().Where(s => !s.isSent).ToList();

			this.InvokeOnMainThread(async () =>
            {
                if (unsentSyncRequests.Any())
                {
                    this.statusLabel.Text = "Your work is saved on your device.\nWith a stable internet connection, press ‘SYNC MANUALLY’ to send it to our servers.";
                    this.statusLabel.TextColor = UIColor.FromRGB(0xFF, 0x00, 0x00);

                    if (await Reachability.isConnected())
                    {
                        await NetworkRequests.SyncDataServer();
                    }
                    else
                    {
                        if (this.syncTimer == null)
                        {
                            this.syncTimer = NSTimer.CreateRepeatingScheduledTimer(60, this.timerAction);
                        }
                    }
                }
                else
                {
                    this.statusLabel.Text = "All your work is safely stored in the cloud now.\nIt is available in the report via your dashboard.";
                    this.statusLabel.TextColor = UIColor.FromRGB(0xED, 0xCD, 0x00);
                }
            });
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

            NetworkRequests.onFinishSync -= this.syncFinishCallback;
            NetworkRequests.onFailSync -= this.syncFailCallback;
            NetworkRequests.onBeginSync -= this.syncBeginCallback;

			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}
		}

        private void syncFailCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
            if (this.isPasswordInvalid())
            {
                this.presentIncorrectPasswordAlert();
            }
        }

		private void syncFinishCallback()
		{
			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}

            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
            this.updateView();
		}

        private void syncBeginCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;

        }

		private async void timerAction(NSTimer timer)
		{
			Console.Error.WriteLine("settings Sync timer fired");

            if (await Reachability.isConnected())
            {
                this.syncTimer.Invalidate();
                this.syncTimer = null;

                await NetworkRequests.SyncDataServer();
            }
		}

		partial void defaultSharingButtonClick (UIButton sender)
		{
			this.PerformSegue("toDefaultSharing", null);
		}

        partial void syncManuallyButtonClick(UIButton sender)
        {
            if (this.isPasswordInvalid())
            {
                this.presentIncorrectPasswordAlert();
            }
            else
            {
                #pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                this.syncManually();
                #pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
            }
        }

        private async Task syncManually()
        {
            var unsentSyncRequests = DBLocalDataStore.GetInstance().getSyncRequests().Where(s => !s.isSent).ToList();

            if (unsentSyncRequests.Any())
            {
                if (await Reachability.isConnected())
                {
                    await NetworkRequests.SyncDataServer();
                }
                else
                {
                    UIAlertController alert = UIAlertController.Create(null, "There is no internet connection available.\nPlease try again later", UIAlertControllerStyle.Alert);
                    alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                    Alert.PresentAlert(alert, true, null);

                    if (this.syncTimer == null)
                    {
                        this.syncTimer = NSTimer.CreateRepeatingScheduledTimer(60, this.timerAction);
                    }
                }
            }
            else
            {
                UIAlertController alert = UIAlertController.Create(null, "All your work is safely stored in the cloud", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                Alert.PresentAlert(alert, true, null);
            }
        }

        partial void appSettingsButtonClick(UIButton sender)
        {
            this.PerformSegue("toAppSettings", null);
        }

		partial void resetWorkbuttonClick (UIButton sender)
		{
			UIAlertView alert = new UIAlertView(null, "Are you sure remove all data from MY WORK?", null, "NO", new string[] {"YES"});
			alert.Delegate = this;
			alert.Tag = new nint(AlertTagEnum.resetWork);
			alert.Show();
		}

		partial void closeButtonClick (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

		partial void switchAppInvisibleTouchUpInside (UIButton sender)
		{
			const int alertTagSwitchAppSynced = AlertTagEnum.switchAppSynced;
			const int alertTagSwitchAppUnsynced = AlertTagEnum.switchAppUnsynced;

            var unsentSyncRequests = DBLocalDataStore.GetInstance().getSyncRequests().Where(s => !s.isSent).ToList();

            if (unsentSyncRequests.Any())
			{
				UIAlertView alert = new UIAlertView(null, "Not all your work is safely stored in the cloud.\nLet's send it now to the cloud.", null, "OK", null);
                alert.Delegate = this;

                alert.Tag = alertTagSwitchAppUnsynced;

                alert.Show();
			}
			else
			{
				UIAlertView alert = new UIAlertView(null, "All your work is safely stored in the cloud.\nWhen you switch to another app setup you will start with a clean work-status.", null, "CANCEL", new string[] { "CONTINUE" });
                alert.Delegate = this;

                alert.Tag = alertTagSwitchAppSynced;

                alert.Show();
			}
		}

		[Export("alertView:clickedButtonAtIndex:")]
		public async void alertClicked(UIAlertView alertview, nint buttonIndex)
		{
            await Task.Delay(505);
			const int alertTagSwitchAppSynced = AlertTagEnum.switchAppSynced;
			const int alertTagSwitchAppUnsynced = AlertTagEnum.switchAppUnsynced;
			const int alertTagResetWork = AlertTagEnum.resetWork;

			switch (alertview.Tag)
			{
				case alertTagResetWork:
				{
					if (buttonIndex == 1)
					{
                        DBLocalDataStore.GetInstance().clearSyncRequests();
						this.updateView();
					}
					break;
				}

				case alertTagSwitchAppSynced:
				{
						if (buttonIndex == 1)
						{
							if (await Reachability.isConnected())
							{
								this.DismissViewController(true, null);
							}
							else
							{
								new UIAlertView(null, "There is no internet connection available.\nPlease try again later.", null, "OK", null).Show();
							}
						}
						break;	
				}
				case alertTagSwitchAppUnsynced:
				{
						if (await Reachability.isConnected())
						{
                            if (this.isPasswordInvalid())
                            {
                                this.presentIncorrectPasswordAlert();
                            }
                            else
                            {
                                #pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                                this.syncManually();
                                #pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                            }
						}
						else
						{
							new UIAlertView(null, "There is no internet connection available.\nPlease try again later.", null, "OK", null).Show();
						}
						break;
				}
			}
		}
	}
}
