// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Threading;

using Foundation;
using UIKit;
using BoaBeePCL;
using CoreGraphics;
using System.Drawing;
using BoaBeeLogic;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace BoaBee.iOS
{
	public partial class KioskQuestionsViewController : KioskBaseViewController, IUITableViewDataSource, IUITableViewDelegate/*, IUITextViewDelegate*/, IAnswerSelection
	{
		private NSObject kbFrameChangeNoificationToken;
		private NSObject kbWillAppearNoificationToken;
		private NSObject kbWillDisappearNoificationToken;

		private List<DBQuestion> questions = new List<DBQuestion>();
        private List<DBAnswer> answers = new List<DBAnswer>();

		private UITextView currentTextView;

		private DBlocalContact matchedContact = null;

		public string matchedContactUID;
		public int matchedContactID;
		public string email;

		public KioskQuestionsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			DBKioskSettings kioskSettings = DBLocalDataStore.GetInstance().GetKioskSettings();
			this.kioskTitleLabel.Text = kioskSettings.kioskTitle;

			this.questionsTableView.EstimatedRowHeight = 44;
			this.questionsTableView.RowHeight = UITableView.AutomaticDimension;
			this.questionsTableView.BackgroundColor = UIColor.FromRGB(this.answerBackgroundColor.redByte, this.answerBackgroundColor.greenByte, this.answerBackgroundColor.blueByte);

			string formDefinitionUUID = DBLocalDataStore.GetInstance().GetSelectedQuestionPosition();

			this.questions = DBLocalDataStore.GetInstance().GetLocalQuestions(formDefinitionUUID);

            this.answers = DBLocalDataStore.GetInstance().getAnswers();
            if (this.answers == null || this.answers.Count == 0)
            {
                DBLocalDataStore.GetInstance().resetAnswers();
                this.answers = DBLocalDataStore.GetInstance().getAnswers();
            }

			for (int index = 0; index < this.questions.Count; index++)
			{
				if (this.questions[index].name.Equals("email"))
				{
                    answers[index].answer = this.email;
                    DBLocalDataStore.GetInstance().updateAnswer(answers[index]);
				}
			}

            this.matchedContact = DBLocalDataStore.GetInstance().GetLocalContactsByUID(this.matchedContactUID);
			if (this.matchedContact != null)
			{
				this.mapContactToForm();
			}
		}

		public override void DidRotate(UIInterfaceOrientation fromInterfaceOrientation)
		{
			base.DidRotate(fromInterfaceOrientation);

			this.scrollViewDidScroll(this.questionsTableView);
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.questionsTableView.ContentInset = new UIEdgeInsets(0, 0, this.bottomButtonsContainerView.Bounds.Size.Height, 0);
			this.questionsTableView.ReloadData();
		}

		public override void ViewDidLayoutSubviews()
		{
			base.ViewDidLayoutSubviews();

			this.scrollViewDidScroll(this.questionsTableView);
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			if (this.kbFrameChangeNoificationToken == null)
			{
				this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);
			}

			if (this.kbWillAppearNoificationToken == null)
			{
				this.kbWillAppearNoificationToken = UIKeyboard.Notifications.ObserveWillShow(kbWillAppearCallback);
			}
			if (this.kbWillDisappearNoificationToken == null)
			{
				this.kbWillDisappearNoificationToken = UIKeyboard.Notifications.ObserveWillHide(kbWillDisappearCallback);
			}
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

            Console.Error.WriteLine ("Kiosk questions WillDisappear");
            
			if (this.currentTextView != null)
			{
				this.currentTextView.ResignFirstResponder();
				this.currentTextView = null;
			}

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}

			if (this.kbWillAppearNoificationToken != null)
			{
				this.kbWillAppearNoificationToken.Dispose();
				this.kbWillAppearNoificationToken = null;
			}

			if (this.kbWillDisappearNoificationToken != null)
			{
				this.kbWillDisappearNoificationToken.Dispose();
				this.kbWillDisappearNoificationToken = null;
			}
		}

		public override void ViewDidDisappear(bool animated)
		{
			base.ViewDidDisappear(animated);

			if (this.currentTextView != null)
			{
				this.currentTextView.ResignFirstResponder();
				this.currentTextView = null;
			}
				
			this.bottomButtonsConstraint.Constant = 0;
			this.View.LayoutIfNeeded();
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
//			CGRect beginFrame = args.FrameBegin;
//			CGRect endFrame = args.FrameEnd;
//
//			if (beginFrame.Equals(endFrame))
//			{
//				return;
//			}
//
//			UIView.Animate(args.AnimationDuration, 
//				() =>
//				{
//					this.bottomTableViewConstraint.Constant += (beginFrame.Y - endFrame.Y);
//					this.bottomButtonsConstraint.Constant += (beginFrame.Y - endFrame.Y);
//					this.View.LayoutIfNeeded();
//				}, () =>
//				{
//					if (this.currentTextView != null)
//					{
//						CGRect cellRect = this.questionsTableView.RectForSection(this.currentTextView.Tag);
//						this.questionsTableView.ScrollRectToVisible(cellRect, true);
//					}
//
//				});
		}

		private void kbWillAppearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			//Console.Error.WriteLine("kbWillAppear end frame {0}", endFrame.ToString());
			UIView.Animate(args.AnimationDuration,
				() =>
				{
//					this.bottomButtonsConstraint.Constant = this.View.Frame.Height - endFrame.Y;
					this.bottomTableViewConstraint.Constant = this.View.Frame.Height - endFrame.Y;
					this.bottomButtonsConstraint.Constant = this.View.Frame.Height - endFrame.Y;
					this.scrollViewDidScroll(this.questionsTableView);
					this.View.LayoutIfNeeded();
				}, () =>
				{
//					this.scrollViewDidScroll(this.questionsTableView);
					if (this.currentTextView != null)
					{
						CGRect cellRect = this.questionsTableView.RectForSection(this.currentTextView.Tag);
						this.questionsTableView.ScrollRectToVisible(cellRect, true);
					}
				});
		}

		private void kbWillDisappearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			//Console.Error.WriteLine("kbWillDisappear begin frame {0}", beginFrame.ToString());
			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomTableViewConstraint.Constant = 0;
					this.bottomButtonsConstraint.Constant = endFrame.Height - this.questionsTableView.ContentOffset.Y;
					this.scrollViewDidScroll(this.questionsTableView);
					this.View.LayoutIfNeeded();
				}, () =>
				{
					
				});
		}

		[Export("scrollViewDidScroll:")]
		public void scrollViewDidScroll(UIScrollView scrollView)
		{
			if (scrollView.IsKindOfClass(new ObjCRuntime.Class(typeof(UITableView))))
			{
				nfloat scrollOffset = scrollView.ContentOffset.Y;
				nfloat yPos = scrollView.ContentSize.Height - scrollOffset;
				yPos = new nfloat(System.Math.Max((double)yPos, (double)(scrollView.Frame.Size.Height - bottomButtonsContainerView.Frame.Size.Height)));
				this.bottomButtonsConstraint.Constant = scrollView.Frame.Size.Height - (yPos + bottomButtonsContainerView.Frame.Size.Height) + this.bottomTableViewConstraint.Constant;
				this.bottomButtonsContainerView.LayoutIfNeeded();
			}
		}

		partial void previousButtonClicked (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

		partial void finishButtonClicked (UIButton sender)
		{
			if (this.currentTextView != null)
			{
				this.EditingEnded(this.currentTextView);
			}
			bool answersValid = true;

            foreach (var question in this.questions)
            {
                var answer = this.answers.Find(a => a.question.Equals(question.question));
                if (question.required && !OfflineLogic.isAnswerValid(answer.answer))
                {
                    answersValid = false;
                    break;
                }
            }

			if (answersValid)
			{
				var newContact = this.mapFormToContact();

                try
                {
                    OfflineLogic.validateContact(newContact, true);
                }
                catch (Exception e)
                {
                    new UIAlertView(null, e.Message, null, "Ok", null).Show();
                    return;
                }

                OfflineLogic.createOrUpdateContact(newContact);

                var allFiles = DBLocalDataStore.GetInstance().GetAllLocalFiles();
                foreach (var file in allFiles)
                {
                    if (file.isDefault)
                    {
                        file.activeFile = true;
                        DBLocalDataStore.GetInstance().UpdateLocalFile(file);
                    }
                }
                    
                try
                {
                    OfflineLogic.prepareSync();
                }
                catch (Exception e)
                {
                    UIAlertController alert = UIAlertController.Create("Error", e.Message, UIAlertControllerStyle.Alert);
                    alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                    this.NavigationController.TopViewController.PresentViewController(alert, true, null);
                }
                this.PerformSegue("toFinish", (NSString)newContact.uid);

                #pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed

                Task.Run(async () =>
                {
                    try
                    {
                        if (await Reachability.isConnected())
                        {
                            Console.WriteLine("Server available");
                            try
                            {
                                await NetworkRequests.SyncDataServer();
                            }
                            catch { }
                        }
                        else
                        {
                            Console.WriteLine("Server not available");
                        }
                    }
                    catch (Exception e)
                    {
                        this.InvokeOnMainThread(() =>
                        {
                            UIAlertController alert = UIAlertController.Create("Error", e.Message, UIAlertControllerStyle.Alert);
                            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));

                            //Alert.PresentAlert(alert, true, null);
                            this.PresentViewController(alert, true, null);
                        });
                    }
                });
                #pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
			}
			else
			{
                UIAlertController alert = UIAlertController.Create("Error", "Not all mandatory questions are completed", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                this.PresentViewController(alert, true, null);
			}
		}

		public void didSelectAnswer(NSDictionary userInfo)
		{
			string selectedOption = userInfo[(NSString)"selectedOption"].ToString();
			int questionNumber = ((NSNumber)userInfo["questionNumber"]).Int32Value;

			DBQuestion question = this.questions[questionNumber];

            var answer = this.answers.Find(a => a.question.Equals(question.question));
            answer.answer = selectedOption;
            DBLocalDataStore.GetInstance().updateAnswer(answer);
		}

		[Export("textViewShouldBeginEditing:")]
		public bool ShouldBeginEditing(UITextView textView)
		{
			this.currentTextView = textView;

			return true;
		}

		[Export("textViewDidEndEditing:")]
		public void EditingEnded(UITextView textView)
		{
			NSDictionary userInfo = NSDictionary.FromObjectsAndKeys(new NSObject[] { (NSString)textView.Text, NSNumber.FromNInt(textView.Tag) }, new NSObject[] {(NSString)"selectedOption", (NSString)"questionNumber"});
			this.didSelectAnswer(userInfo);
		}
			

		[Export("numberOfSectionsInTableView:")]
		public nint NumberOfSections(UITableView tableView)
		{
			return this.questions.Count;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			return 2;
		}

		[Export("tableView:viewForFooterInSection:")]
		public  UIView GetViewForFooter(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:viewForHeaderInSection:")]
		public  UIView GetViewForHeader(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:heightForFooterInSection:")]
		public nfloat GetHeightForFooter(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		[Export("tableView:heightForHeaderInSection:")]
		public nfloat GetHeightForHeader(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = null;
			DBQuestion questionForCell = this.questions[(int)indexPath.Section];

			switch (indexPath.Row)
			{
				case 0:
				{
					cell = (QuestionCell)tableView.DequeueReusableCell("questionCell", indexPath);
					((QuestionCell)cell).initWithQuestion(questionForCell, this.questionFontSize, this.questionFontColor, this.questionBackgroundColor);
				}
				break;
				case 1:
				{
					//Console.Error.WriteLine ("Row: {0} name: {1}", indexPath.Section, questionForCell.name);

					string answersOptions = questionForCell.options;
                    DBAnswer answer = this.answers.Find(a => a.question.Equals(questionForCell.question));

                    if (string.IsNullOrEmpty(answersOptions))
					{
						cell = tableView.DequeueReusableCell("answerTypingCell", indexPath);

                        ((AnswerTypingCell)cell).initWithAnswerAndTag(answer.answer, indexPath.Section, this.answerFontSize, this.answerFontColor, this.answerBackgroundColor);
						UITextView cellTextView = ((AnswerTypingCell)cell).getTextView();

						UIDatePicker datePicker = new UIDatePicker();
						datePicker.BackgroundColor = UIColor.FromRGB(0x1B, 0x1B, 0x1B);
						datePicker.SetValueForKey(UIColor.FromRGB(0xED, 0xCD, 0x00), (NSString)"textColor");

						switch (questionForCell.type.ToLower())
						{
							case "datetime":
							{
								datePicker.Mode = UIDatePickerMode.DateAndTime;
								try
								{
									datePicker.SetDate(DateFormatter.parseDateTime(cellTextView.Text), false);
								}
								catch { }

								datePicker.ValueChanged += (object sender, EventArgs e) =>
									{
										string formattedDate = DateFormatter.formatDateTime(datePicker.Date);

										cellTextView.Text = formattedDate;
									};

								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								cellTextView.InputView = datePicker;
								break;
							}
							case "date":
							{
								datePicker.Mode = UIDatePickerMode.Date;
								try
								{
									datePicker.SetDate(DateFormatter.parseDate(cellTextView.Text), false);
								}
								catch { }

								datePicker.ValueChanged += (object sender, EventArgs e) =>
									{
										string formattedDate = DateFormatter.formatDate(datePicker.Date);

										cellTextView.Text = formattedDate;
									};

								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								cellTextView.InputView = datePicker;
								break;
							}
							case "integer":
							{
								cellTextView.KeyboardType = UIKeyboardType.NumberPad;
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								cellTextView.InputView = null;
								break;
							}
							case "string":
							{
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
								switch (questionForCell.name.ToLower())
								{
									case "mobile":
									case "phone":
									case "fax":
									{
										cellTextView.KeyboardType = UIKeyboardType.PhonePad;
										break;
									}
									default:
									{
										cellTextView.KeyboardType = UIKeyboardType.Default;
										break;
									}
								}
								
								cellTextView.InputView = null;
								break;
							}
							default:
							{
								cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
								cellTextView.KeyboardType = UIKeyboardType.Default;
								cellTextView.InputView = null;
								break;
							}
						}
					}
					else
					{
						cell = tableView.DequeueReusableCell("answerSelectionCell", indexPath);

                        string selectedOption = answer.answer;
						((AnswerSelectionCell)cell).initWithOption(selectedOption, this.answerFontSize, this.answerFontColor, this.answerBackgroundColor);
					}
				}
				break;
			}
			return cell;
		}

		[Export("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow(indexPath, true);

			if (this.currentTextView != null)
			{
				this.currentTextView.ResignFirstResponder();
				this.currentTextView = null;
			}

			if (indexPath.Row == 1)
			{
				DBQuestion question = this.questions[(int)indexPath.Section];

				if (question.options.Length > 0)
				{
					NSDictionary questionDictionary = NSDictionary.FromObjectsAndKeys(new object[] { question.question, question.options, NSNumber.FromInt32(indexPath.Section) }, new object[] { "question", "options", "questionNumber" });

					this.PerformSegue("toSelectAnswer", questionDictionary);
				}
			}
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toSelectAnswer"))
			{
				SelectAnswerViewController target = (SelectAnswerViewController)segue.DestinationViewController;
				target.questionDictionary = (NSDictionary)sender;
				target.caller = this;
			}
            if (segue.Identifier.Equals("toFinish"))
            {
                KioskFinishViewController target = (KioskFinishViewController)segue.DestinationViewController;
                target.contactUID = sender.ToString();
            }
		}

		private void mapContactToForm()
		{
			foreach (var question in this.questions)
			{
				string newAnswer = null;
				if (question.name.Equals("externalReference"))
				{
					newAnswer = this.matchedContact.externalReference;
				}
				if (question.name.Equals("externalCompanyReference"))
				{
					newAnswer = this.matchedContact.externalCompanyReference;
				}
				if (question.name.Equals("prefix"))
				{
					newAnswer = this.matchedContact.prefix;
				}
				if (question.name.Equals("firstname"))
				{
					newAnswer = this.matchedContact.firstname;
				}
				if (question.name.Equals("lastname"))
				{
					newAnswer = this.matchedContact.lastname;
				}
				if (question.name.Equals("email"))
				{
					newAnswer = this.matchedContact.email;
				}
				if (question.name.Equals("mobile"))
				{
					newAnswer = this.matchedContact.mobile;
				}
				if (question.name.Equals("phone"))
				{
					newAnswer = this.matchedContact.phone;
				}
				if (question.name.Equals("fax"))
				{
					newAnswer = this.matchedContact.fax;
				}
				if (question.name.Equals("company"))
				{
					newAnswer = this.matchedContact.company;
				}
				if (question.name.Equals("vat"))
				{
					newAnswer = this.matchedContact.vat;
				}
				if (question.name.Equals("jobTitle"))
				{
					newAnswer = this.matchedContact.jobtitle;
				}
				if (question.name.Equals("function"))
				{
					newAnswer = this.matchedContact.function;
				}
				if (question.name.Equals("level"))
				{
					newAnswer = this.matchedContact.level;
				}
				if (question.name.Equals("department"))
				{
					newAnswer = this.matchedContact.department;
				}
				if (question.name.Equals("street"))
				{
					newAnswer = this.matchedContact.street;
				}
				if (question.name.Equals("city"))
				{
					newAnswer = this.matchedContact.city;
				}
				if (question.name.Equals("zip"))
				{
					newAnswer = this.matchedContact.zip;
				}
				if (question.name.Equals("country"))
				{
					newAnswer = this.matchedContact.country;
				}

				if (!string.IsNullOrEmpty(newAnswer))
				{
                    int questionIndex = this.questions.IndexOf(question);
                    var answer = this.answers[questionIndex];
                    answer.answer = newAnswer;
                    DBLocalDataStore.GetInstance().updateAnswer(answer);
				}
			}
		}

		private DBlocalContact mapFormToContact()
		{
			DBlocalContact newContact = new DBlocalContact();
			if (this.matchedContact != null)
			{
				newContact.Id = this.matchedContact.Id;
                newContact.uid = this.matchedContact.uid;

				newContact.firstname = this.matchedContact.firstname;
				newContact.lastname = this.matchedContact.lastname;
				newContact.email = this.matchedContact.email;
				newContact.company = this.matchedContact.company;
				newContact.phone = this.matchedContact.phone;
				newContact.jobtitle  = this.matchedContact.jobtitle;

				newContact.externalReference = this.matchedContact.externalReference;
				newContact.externalCompanyReference = this.matchedContact.externalCompanyReference;
				newContact.prefix = this.matchedContact.prefix;
				newContact.mobile = this.matchedContact.mobile;
				newContact.fax = this.matchedContact.fax;
				newContact.vat = this.matchedContact.vat;
				newContact.function = this.matchedContact.function;
				newContact.level = this.matchedContact.level;
				newContact.department = this.matchedContact.department;
				newContact.street = this.matchedContact.street;
				newContact.city = this.matchedContact.city;
				newContact.zip = this.matchedContact.zip;
				newContact.country = this.matchedContact.country;
			}
			else
			{
				newContact.email = this.email;
                newContact.uid = this.email;
			}
            newContact.source = ContactSource.Manual;

            foreach (var question in this.questions)
            {
                var answer = this.answers.Find(a => a.question.Equals(question.question));
                switch (question.name)
                {
                    case "externalReference":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.externalReference = newValue;
                        break;
                    }
                    case "externalCompanyReference":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.externalCompanyReference = newValue;
                        break;
                    }
                    case "prefix":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.prefix = newValue;
                        break;
                    }
                    case "firstname":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.firstname = newValue;
                        break;
                    }
                    case "lastname":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.lastname = newValue;
                        break;
                    }
                    case "email":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.email = newValue;
                        break;
                    }
                    case "mobile":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.mobile = newValue;
                        break;
                    }
                    case "phone":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.phone = newValue;
                        break;
                    }
                    case "fax":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.fax = newValue;
                        break;
                    }
                    case "company":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.company = newValue;
                        break;
                    }
                    case "vat":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.vat = newValue;
                        break;
                    }
                    case "jobTitle":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.jobtitle = newValue;
                        break;
                    }
                    case "function":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.function = newValue;
                        break;
                    }
                    case "level":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.level = newValue;
                        break;
                    }
                    case "department":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.department = newValue;
                        break;
                    }
                    case "street":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.street = newValue;
                        break;
                    }
                    case "city":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.city = newValue;
                        break;
                    }
                    case "zip":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.zip = newValue;
                        break;
                    }
                    case "country":
                    {
                        string newValue = answer.answer.Replace("select a value", "");
                        if (string.IsNullOrEmpty(newValue))
                        {
                            newValue = null;
                        }
                        newContact.country = newValue;
                        break;
                    }
                }
            }
			return newContact;
		}
	}
}
