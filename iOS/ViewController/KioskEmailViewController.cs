// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;
using BoaBeePCL;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class KioskEmailViewController : KioskBaseViewController
	{
		private NSObject kbFrameChangeNoificationToken;
		private NSObject kbWillAppearNoificationToken;
		private NSObject kbWillDisappearNoificationToken;



		public KioskEmailViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			DBKioskSettings kioskSettings = DBLocalDataStore.GetInstance().GetKioskSettings();

			this.kioskTitleLabel.Text = kioskSettings.kioskTitle;

			this.View.BackgroundColor = UIColor.FromRGB(this.questionBackgroundColor.red, this.questionBackgroundColor.green, this.questionBackgroundColor.blue);
			this.enterEmailLabel.TextColor = UIColor.FromRGB(this.questionFontColor.red, this.questionFontColor.green, this.questionFontColor.blue);
			this.enterEmailLabel.Font = this.enterEmailLabel.Font.WithSize(this.questionFontSize);

			this.emailTextField.BackgroundColor = UIColor.FromRGB(this.answerBackgroundColor.red, this.answerBackgroundColor.green, this.answerBackgroundColor.blue);
			this.emailTextField.TextColor = UIColor.FromRGB(this.answerFontColor.red, this.answerFontColor.green, this.answerFontColor.blue);
			this.emailTextField.Font = this.emailTextField.Font.WithSize(this.answerFontSize);

			#if DEBUG
			{
				this.emailTextField.Text = "q@w.com";
			}
			#endif
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			if (this.kbFrameChangeNoificationToken == null)
			{
				this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);
			}
			if (this.kbWillAppearNoificationToken == null)
			{
				this.kbWillAppearNoificationToken = UIKeyboard.Notifications.ObserveWillShow(kbWillAppearCallback);
			}
			if (this.kbWillDisappearNoificationToken == null)
			{
				this.kbWillDisappearNoificationToken = UIKeyboard.Notifications.ObserveWillHide(kbWillDisappearCallback);
			}
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			this.emailTextField.ResignFirstResponder();

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}

			if (this.kbWillAppearNoificationToken != null)
			{
				this.kbWillAppearNoificationToken.Dispose();
				this.kbWillAppearNoificationToken = null;
			}

			if (this.kbWillDisappearNoificationToken != null)
			{
				this.kbWillDisappearNoificationToken.Dispose();
				this.kbWillDisappearNoificationToken = null;
			}
		}

		[Export(@"textFieldShouldReturn:")]
		bool textFieldShouldReturn(UITextField sender)
		{
			sender.ResignFirstResponder();
			return true;
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
//			Console.Error.WriteLine("kbWillChange");
//
//			CGRect beginFrame = args.FrameBegin;
//			CGRect endFrame = args.FrameEnd;
//
//			if (beginFrame.Equals(endFrame))
//			{
//				return;
//			}
//				
//			UIView.Animate(args.AnimationDuration, 
//				() =>
//				{
//					this.bottomButtonsConstraint.Constant += (beginFrame.Y - endFrame.Y);
//					this.View.LayoutIfNeeded();
//				});
		}

		private void kbWillAppearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect endFrame = args.FrameEnd;

			//Console.Error.WriteLine("kbWillAppear end frame {0}", endFrame.ToString());
			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomButtonsConstraint.Constant = this.View.Frame.Height - endFrame.Y;
//					this.bottomButtonsConstraint.Constant = endFrame.Height;
					this.View.LayoutIfNeeded();
				});
		}

		private void kbWillDisappearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;

			//Console.Error.WriteLine("kbWillDisappear begin frame {0}", beginFrame.ToString());

			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomButtonsConstraint.Constant = 0;
					this.View.LayoutIfNeeded();
				});
		}

		partial void cancelButtonClicked (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

		partial void nextButtonClicked (UIButton sender)
		{
			//if (this.isEmail(this.emailTextField.Text))
            if (OfflineLogic.isEmail(this.emailTextField.Text))
			{
				var allContacts = DBLocalDataStore.GetInstance().GetLocalContacts();
				DBlocalContact matchedContact = allContacts.FirstOrDefault(s=> !string.IsNullOrWhiteSpace(s.email) && s.email.ToLower().Equals(this.emailTextField.Text.ToLower()));
				if (matchedContact != null)
				{
					Console.Error.WriteLine("Matched {0} {1}", matchedContact.firstname, matchedContact.lastname);
				}
				else
				{
					Console.Error.WriteLine("Nothing matched");
				}

                NSString matchedUID = matchedContact != null ? (NSString)matchedContact.uid : null;

                this.PerformSegue("toQuestions", matchedUID);
			}
			else
			{
                var message = "";
                if (string.IsNullOrWhiteSpace(this.emailTextField.Text))
                {
                    message = "Email is missing";
                }
                else
                {
                    message = "Email is incorrect";
                }

                UIAlertController alert = UIAlertController.Create("Error", message, UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
                this.PresentViewController(alert, true, null);
			}
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toQuestions"))
			{
				KioskQuestionsViewController target = (KioskQuestionsViewController)segue.DestinationViewController;

                target.matchedContactUID = sender != null ? sender.ToString() : null;
				//target.matchedContactID = ((NSNumber)sender)!=null ? ((NSNumber)sender).Int32Value : int.MinValue;
				target.email = this.emailTextField.Text;
			}
		}
	}
}
