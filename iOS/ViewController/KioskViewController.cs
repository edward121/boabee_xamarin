// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using BoaBeePCL;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using Newtonsoft.Json;
using BoaBeeLogic;

namespace BoaBee.iOS 
{
	public partial class KioskViewController : UIViewController
	{
        private List<DBSyncRequest> syncRequests;

		private NSTimer syncTimer;
		private NSTimer webhookTimer;

		public KioskViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			DBSelectProfile selectedProfile = DBLocalDataStore.GetInstance().GetSelectProfile();

			this.appNameLabel.Text = selectedProfile.displayName;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            NetworkRequests.onFinishSync += this.syncFinishCallback;
            NetworkRequests.onFailSync += this.syncFailCallback;
            NetworkRequests.onBeginSync += this.syncBeginCallback;

			this.updateView();
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

            NetworkRequests.onFinishSync -= this.syncFinishCallback;
            NetworkRequests.onFailSync -= this.syncFailCallback;
            NetworkRequests.onBeginSync -= this.syncBeginCallback;

			if (this.syncTimer != null)
			{
				this.syncTimer.Invalidate();
				this.syncTimer = null;
			}
			if (this.webhookTimer != null)
			{
				this.webhookTimer.Invalidate();
				this.webhookTimer = null;
			}
		}

        private void syncBeginCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
        }

        private void syncFailCallback()
        {
            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
        }

        private void syncFinishCallback()
        {
            if (this.syncTimer != null)
            {
                this.syncTimer.Invalidate();
                this.syncTimer = null;
            }

            UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
            this.updateView();
        }

		private void webhookFinishCallback(NSNotification notification)
		{
			if (this.webhookTimer != null)
			{
				this.webhookTimer.Invalidate();
				this.webhookTimer = null;
			}
		}

		private void updateView()
		{
            this.syncRequests = DBLocalDataStore.GetInstance().getSyncRequests().ToList();

            this.InvokeOnMainThread(async () =>
            {
                if (syncRequests.Any(r => !r.isSent))
                {
                    this.settingsButton.SetBackgroundImage(UIImage.FromBundle("CloudRed"), UIControlState.Normal);
                }
                else
                {
                    this.settingsButton.SetBackgroundImage(UIImage.FromBundle("SettingsButton"), UIControlState.Normal);
                }

                var allContacts = DBLocalDataStore.GetInstance().GetLocalContacts();
                var contactsMet = new List<DBlocalContact>();
                int formsCount = 0;
                int shareCount = 0;
                syncRequests.ForEach((r) =>
                {
                    SyncContext context = JsonConvert.DeserializeObject<SyncContext>(r.serializedSyncContext);
                    if (!context.contacts.isNullOrEmpty())
                    {
                        context.contacts.ForEach((met) =>
                        {
                            var contact = allContacts.Find(c => c.uid.Equals(met.uid));
                            contactsMet.Add(contact);
                        });
                    }
                    if (!context.forms.isNullOrEmpty())
                    {
                        formsCount += context.forms.Count;
                    }
                    if (!context.orders.isNullOrEmpty())
                    {
                        shareCount += context.orders.Where(o => o.orderLine.Count > 0).Count();
                    }
                });

                var comparer = new DBLocalContactsComparer();
                this.contactsMetButton.SetTitle(contactsMet.Distinct(comparer).Count().ToString(), UIControlState.Normal);
                this.infoSheetsButton.SetTitle(formsCount.ToString(), UIControlState.Normal);
                this.emailsSentButton.SetTitle(shareCount.ToString(), UIControlState.Normal);

                if (syncRequests.Any(r => !r.isSent))
                {
                    if (await Reachability.isConnected())
                    {
                        Console.Error.WriteLine("kiosk sync needed");
                        try
                        {
                            await NetworkRequests.SyncDataServer();
                        }
                        catch { }
                    }
                    else
                    {
                        if (this.syncTimer == null)
                        {
                            //#warning 60 sec
                            this.syncTimer = NSTimer.CreateRepeatingScheduledTimer(60, this.timerAction);
                        }
                    }
                }
            });
		}

		private async void timerAction(NSTimer timer)
		{
			Console.Error.WriteLine("Sync timer fired");

            if (await Reachability.isConnected())
            {
                this.syncTimer.Invalidate();
                this.syncTimer = null;

                try
                {
                    await NetworkRequests.SyncDataServer();
                }
                catch { }
            }
		}

		partial void contactsMetButtonPressed (UIButton sender)
		{
			this.PerformSegue("ContactsMet", null);
		}

		partial void infoSheetsButtonClicked (UIButton sender)
		{
			this.PerformSegue("InfoSheets", null);
		}

		partial void emailsSentButtonPressed (UIButton sender)
		{
			this.PerformSegue("EmailsSent", null);
		}

		partial void settingsButtonClicked (UIButton sender)
		{
			this.PerformSegue("toKioskStatus", null);
		}

		partial void startKioskButtonClicked (UIButton sender)
		{
			this.PerformSegue("toKioskCycle", null);
		}
	}
}
