// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;

using CoreGraphics;

using Foundation;
using UIKit;

using BoaBeePCL;
using BoaBeeLogic;

namespace BoaBee.iOS
{
	public partial class SelectContactViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate
	{
        private List<DBlocalContact> allContacts = new List<DBlocalContact>();
		private List<DBlocalContact> filteredContacts = new List<DBlocalContact>();
		private NSObject kbFrameChangeNoificationToken;

		public bool isKiosk = false;
        public delegate void prospectSelectContactDelegate();
        public event prospectSelectContactDelegate onProspectSelectContact;

		public SelectContactViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

			this.contactsTableView.EstimatedRowHeight = 44;
			this.contactsTableView.RowHeight = UITableView.AutomaticDimension;

			UIStringAttributes placeholderAttributes = new UIStringAttributes();
			placeholderAttributes.ForegroundColor = UIColor.FromRGB(0x71, 0x71, 0x71);
			NSAttributedString searchPlaceholder = new NSAttributedString (this.searchTextField.Placeholder, placeholderAttributes);

			this.searchTextField.AttributedPlaceholder = searchPlaceholder;

			if (this.isKiosk)
			{
                this.titleLabel.Text = "CONTACTS";
                this.crossButton.Hidden = true;
			}
        }

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.allContacts = DBLocalDataStore.GetInstance().GetLocalContacts();

			this.contactsTableView.ReloadData();
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			UIView.Animate(args.AnimationDuration, 
				() =>
				{
					this.bottomButtonConstraint.Constant += (beginFrame.Y - endFrame.Y);
					this.View.LayoutIfNeeded();
				});
		}

		partial void textFieldEditingChanged (UITextField sender)
		{
            List<DBlocalContact> matchedContacts = this.allContacts.Where(s => string.Join(" ", new string[] { s.firstname, s.lastname, s.company }).ToLower().Contains(sender.Text.ToLower())).ToList();

			this.filteredContacts.Clear();
			this.filteredContacts.AddRange(matchedContacts);

			this.contactsTableView.ReloadData();
		}

		partial void textFieldEditingDidBegin (UITextField sender)
		{

		}

		partial void textFieldEditingDidEnd (UITextField sender)
		{
            
		}

		partial void cancelButtonClick (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

        partial void crossButtonClick(UIButton sender)
        {
            UIAlertController alert = UIAlertController.Create("Warning", "Your current work will be lost.", UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, null));
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Destructive, (obj) =>
            {
                OfflineLogic.ClearDataSelected(false);

                this.DismissViewController(true, null);
            }));

            Alert.PresentAlert(alert, true, null);
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
			if (this.searchTextField.Text.Length > 0)
			{
				return this.filteredContacts.Count;
			}
			return this.allContacts.Count;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
			DBlocalContact contact;
			if (this.searchTextField.Text.Length > 0)
			{
				contact = this.filteredContacts[indexPath.Row];
			}
			else
			{
				contact = this.allContacts[indexPath.Row];
			}

            //string reuseID = (!string.IsNullOrEmpty(contact.firstname) && !string.IsNullOrEmpty(contact.lastname)) ? "ContactCell" : "BarcodeCell";
            string reuseID = "ContactCell";

			ContactCell cell = (ContactCell)tableView.DequeueReusableCell(reuseID, indexPath);

			cell.initWithContact(contact, this.isKiosk);

			return cell;
        }

		[Export("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow(indexPath, true);

			DBlocalContact contact = (this.searchTextField.Text.Length > 0) ? this.filteredContacts[indexPath.Row] : this.allContacts[indexPath.Row];
			if (this.isKiosk)
			{
				this.PerformSegue("toEditContact", NSNumber.FromInt32(contact.Id));
			}
			else
			{
                if (!contact.activeContact)
                {
                    contact.activeContact = true;
                    DBLocalDataStore.GetInstance().UpdateLocalContact(contact);
                }

                //this.NavigationController.PopViewController(true);

                if (this.onProspectSelectContact != null)
                {
                    this.onProspectSelectContact();
                }
			}
		}

		partial void editButtonClick (UIButton sender, UIEvent @event)
		{
			UITouch touch = (UITouch)@event.TouchesForView(sender).AnyObject;
			CGPoint touchLocation = touch.LocationInView(this.contactsTableView);

			NSIndexPath indexPath = this.contactsTableView.IndexPathForRowAtPoint(touchLocation);

			DBlocalContact contact = (this.searchTextField.Text.Length > 0) ? this.filteredContacts[indexPath.Row] : this.allContacts[indexPath.Row];

			this.PerformSegue("toEditContact", NSNumber.FromInt32(contact.Id));
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toEditContact"))
			{
				EditContactRootViewController target = (EditContactRootViewController)segue.DestinationViewController;
                DBlocalContact contact = DBLocalDataStore.GetInstance().GetLocalContactsById(((NSNumber)sender).Int32Value);
                target.contact = contact;

                target.onCancelEdit += () =>
                {
                    Console.Error.WriteLine("Edit cancelled");
                };
                target.onCommitEdit += (DBlocalContact c) =>
                {
                    c.source = ContactSource.Edit;
                    if (string.IsNullOrWhiteSpace(contact.uid))
                    {
                        if (!string.IsNullOrWhiteSpace(c.email))
                        {
                            var contactsWithSameUID = DBLocalDataStore.GetInstance().GetLocalContactsByUID(c.email);
                            if (contactsWithSameUID == null)
                            {
                                c.uid = c.email;
                                c.Id = contact.Id;
                            }
                            else
                            {
                                throw new Exception("Please enter another email. It will act as ID, you can change it later.");
                            }
                        }
                        else
                        {
                            throw new Exception("Please fill in email");
                        }
                    }
                    OfflineLogic.createOrUpdateContact(c);
                };
			}
		}
	}
}
