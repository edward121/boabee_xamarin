// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using BoaBeePCL;
using System.Linq;
using CoreGraphics;

namespace BoaBee.iOS
{
	public partial class DefaultShareViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate, IUIDocumentInteractionControllerDelegate
	{
		private List<DBfileTO> currentFolder;
		private List<DBfileTO> allFiles;
		private DBfileTO parentFolder = null;

		private List<DBfileTO> addedFiles = new List<DBfileTO>();

		public DefaultShareViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

            this.allFiles = DBLocalDataStore.GetInstance().GetAllLocalFiles();
            this.addedFiles = this.allFiles.Where(f => f.isDefault).ToList();

			DBFileToComparer comparer = new DBFileToComparer();
			this.allFiles.Sort(comparer);

			this.currentFolder = this.allFiles.Where(s => s.folderUuid == "_empty_").ToList ();

			this.foldersTableView.EstimatedRowHeight = 53;
			this.foldersTableView.RowHeight = UITableView.AutomaticDimension;

			if (this.allFiles.Count == 0)
			{
				this.noDocumentationLabel.Hidden = false;
				this.foldersTableView.Hidden = true;
			}
			else
			{
				this.noDocumentationLabel.Hidden = true;
				this.foldersTableView.Hidden = false;
			}

			this.filesOverviewButton.TitleLabel.TextAlignment = UITextAlignment.Center;
			this.filesOverviewButton.TitleLabel.LineBreakMode = UILineBreakMode.Clip;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.filesOverviewButton.SetTitle(string.Format(" {0} ", this.addedFiles.Count), UIControlState.Normal);

			this.foldersTableView.ReloadData();
		}

		partial void crossButtonClick (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

		partial void tickButtonClick (UIButton sender)
		{
			DBLocalDataStore ds = DBLocalDataStore.GetInstance();

            foreach (var file in this.allFiles)
            {
                ds.UpdateLocalFile(file);
            }

			this.NavigationController.PopViewController(true);
		}

		partial void filesOverviewButtonClick (UIButton sender)
		{
			if (this.addedFiles.Count > 0)
			{
				this.PerformSegue("toDefaultShareOverview", null);
			}
		}

		partial void plusButtonClick (UIKit.UIButton sender, UIKit.UIEvent @event)
		{
			UITouch touch = (UITouch)@event.TouchesForView(sender).AnyObject;
			CGPoint touchLocation = touch.LocationInView(this.foldersTableView);

			NSIndexPath indexPath = this.foldersTableView.IndexPathForRowAtPoint(touchLocation);

			DBfileTO selectedFile = this.currentFolder[indexPath.Row];
            if (selectedFile.isDefault)
            {
                selectedFile.isDefault = false;

                int removeIndex = this.addedFiles.FindIndex(s => s.uuid.Equals(selectedFile.uuid));
                this.addedFiles.RemoveAt(removeIndex);

                sender.Selected = false;
            }
            else
            {
                selectedFile.isDefault = true;

                this.addedFiles.Add(selectedFile);

                sender.SetImage(UIImage.FromBundle("CheckboxChecked"), UIControlState.Selected);
                sender.Selected = true;
            }

			this.filesOverviewButton.SetTitle(string.Format(" {0} ", this.addedFiles.Count), UIControlState.Normal);

			UILabel countLabel = this.filesOverviewButton.TitleLabel;
			ViewBouncer.bounceViewWithScaleFactor(countLabel, 1.35f);

			UIImageView plusImage = sender.ImageView;
			ViewBouncer.bounceViewWithScaleFactor(plusImage, 1.2f);
		}
			

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toDefaultShareOverview"))
			{
				DefaultShareOverviewViewController target = (DefaultShareOverviewViewController)segue.DestinationViewController;
				target.addedFiles = this.addedFiles;
			}
		}

		[Export("numberOfSectionsInTableView:")]
		public nint NumberOfSections(UITableView tableView)
		{
			return 2;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			if (section == 0)
			{
				if (this.parentFolder != null)
				{
					return 1;
				}
				else
				{
					return 0;
				}
			}
			return this.currentFolder.Count;
		}

		[Export("tableView:viewForFooterInSection:")]
		public  UIView GetViewForFooter(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:viewForHeaderInSection:")]
		public  UIView GetViewForHeader(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:heightForFooterInSection:")]
		public nfloat GetHeightForFooter(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		[Export("tableView:heightForHeaderInSection:")]
		public nfloat GetHeightForHeader(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0)
			{
				BackCell cell = (BackCell)tableView.DequeueReusableCell("BackCell", indexPath);

				cell.initWithParentName(this.parentFolder.name);
				return cell;
			}
			else
			{
				if (this.currentFolder[indexPath.Row].fileType.Equals("folder"))
				{
					DBfileTO folder = this.currentFolder[indexPath.Row];

					FolderCell cell = (FolderCell)tableView.DequeueReusableCell("FolderCell", indexPath);

					cell.initWithFolderName(folder.name);
					return cell;
				}
				else
				{
					DBfileTO file = this.currentFolder[indexPath.Row];

					FileCell cell = (FileCell)tableView.DequeueReusableCell("FileCell", indexPath);

					bool isFileAdded = this.addedFiles.Any(s=> s.uuid.Equals(file.uuid));

					cell.initWithFile(file, isFileAdded);
					return cell;
				}
			}
		}

		[Export("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow(indexPath, true);

			if (indexPath.Section == 0)
			{
				this.currentFolder = this.allFiles.Where(s => s.folderUuid == parentFolder.folderUuid).ToList();
				try
				{
					this.parentFolder = this.allFiles.Where(s => s.uuid == currentFolder[0].folderUuid).ToList().First();
				}
				catch
				{
//					tableView.BackgroundColor = UIColor.Black;
					this.parentFolder = null;
				}

				tableView.ReloadData();

//				NSMutableIndexSet indexSet = new NSMutableIndexSet();
//				indexSet.Add((nuint)0);
//				indexSet.Add((nuint)1);
//				tableView.ReloadSections(indexSet, UITableViewRowAnimation.Fade);
			}
			else
			{
				DBfileTO selectedItem = this.currentFolder[indexPath.Row];

				if (selectedItem.fileType.Equals("folder"))
				{
					this.parentFolder = selectedItem;
					this.currentFolder = this.allFiles.Where(s => s.folderUuid == parentFolder.uuid).ToList();

					tableView.ReloadData();

//					NSMutableIndexSet indexSet = new NSMutableIndexSet();
//					indexSet.Add((nuint)0);
//					indexSet.Add((nuint)1);
//					tableView.ReloadSections(indexSet, UITableViewRowAnimation.Fade);

//					tableView.BackgroundColor = UIColor.FromRGB(0x1b, 0x1b, 0x1b);
				}
				else if (selectedItem.fileType.Equals("url"))
				{
					bool success = UIApplication.SharedApplication.OpenUrl(new NSUrl(selectedItem.localpath));
					if (!success)
					{
						success = UIApplication.SharedApplication.OpenUrl(new NSUrl(string.Format("http://{0}", selectedItem.localpath)));
						if (!success)
						{
							success = UIApplication.SharedApplication.OpenUrl(new NSUrl(string.Format("https://{0}", selectedItem.localpath)));
							if (!success)
							{
								new UIAlertView(null, "Could not preview selected item", null, "OK", null).Show();
							}
						}
					}
				}
				else
				{
					string documentsDirectory = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
					string filePath = System.IO.Path.Combine(documentsDirectory, selectedItem.localpath);

					NSUrl fileURL = NSUrl.FromFilename(filePath);

					bool success;

					if (selectedItem.fileType.Equals("webloc"))
					{
						NSUrl wwwURL = this.getURLFromWeblocData(NSData.FromUrl(fileURL));

						success = UIApplication.SharedApplication.OpenUrl(wwwURL);
						if (!success)
						{
							new UIAlertView(null, "Could not preview selected item", null, "OK", null).Show();
						}
					}
					else
					{
						var docController = UIDocumentInteractionController.FromUrl(fileURL);

						docController.Delegate = this;
						docController.Name = selectedItem.name;

						success = docController.PresentPreview(true);
						if (!success)
						{
							new UIAlertView(null, "Could not preview selected item", null, "OK", null).Show();
						}
					}
				}
			}
		}

		private NSUrl getURLFromWeblocData(NSData data)
		{
			NSPropertyListFormat format = NSPropertyListFormat.Binary;
			NSError error;
			NSDictionary dict = (NSDictionary)NSPropertyListSerialization.PropertyListWithData(data, NSPropertyListReadOptions.Immutable, ref format, out error);
			if (error != null)
			{
				return null;
			}

			string urlString = dict["URL"].ToString();

			return NSUrl.FromString(urlString);
		}



		[Export("documentInteractionControllerViewControllerForPreview:")]
		public UIViewController ViewControllerForPreview(UIDocumentInteractionController controller)
		{
			return this;
		}

		[Export("documentInteractionControllerWillBeginPreview:")]
		public void WillBeginPreview(UIDocumentInteractionController controller)
		{
			UIApplication.SharedApplication.SetStatusBarStyle (UIStatusBarStyle.Default, true);
		}

		[Export("documentInteractionControllerDidEndPreview:")]
		public void DidEndPreview(UIDocumentInteractionController controller)
		{
			UIApplication.SharedApplication.SetStatusBarStyle (UIStatusBarStyle.LightContent, true);
		}
	}
}
