// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using BoaBeePCL;
using CoreGraphics;

namespace BoaBee.iOS
{
	public partial class KioskSettingsViewController : UIViewController
	{
		private KioskSettingsTableViewController kioskSettingsTableViewController;

		private DBKioskSettings kioskSettings;

		private NSObject kbFrameChangeNoificationToken;
		private NSObject showContactsNotificationToken;
		private NSObject colorSettingsNotificationToken;

		public KioskSettingsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.kioskSettingsTableViewController = (KioskSettingsTableViewController)this.ChildViewControllers[0];

			this.kioskSettings = DBLocalDataStore.GetInstance().GetKioskSettings();
			if (this.kioskSettings == null)
			{
				this.kioskSettings = new DBKioskSettings();
				this.kioskSettings.kioskTitle = "Welcome";
				this.kioskSettings.badgePrinting = false;
				this.kioskSettings.badgePrintingWebhook = "http://192.168.1.2:8080/rest/api/registree/register";

				DBLocalDataStore.GetInstance().SetKioskSettings(this.kioskSettings);
			}
			this.kioskSettingsTableViewController.initWithKioskSettings(this.kioskSettings);
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			if (this.kbFrameChangeNoificationToken == null)
			{
				this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);
			}
			if (this.showContactsNotificationToken == null)
			{
				this.showContactsNotificationToken = NSNotificationCenter.DefaultCenter.AddObserver((NSString)"ShowContactsNotification", (NSNotification notification) =>
				{
					this.PerformSegue("ShowContacts", null);
				});
			}
			if (this.colorSettingsNotificationToken == null)
			{
				this.colorSettingsNotificationToken = NSNotificationCenter.DefaultCenter.AddObserver((NSString)"ColorSettingsNotification", (NSNotification notification) =>
				{
					this.PerformSegue("ColorSettings", null);
				});
			}
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}
			if (this.showContactsNotificationToken != null)
			{
				this.showContactsNotificationToken.Dispose();
				this.showContactsNotificationToken = null;
			}

			if (this.colorSettingsNotificationToken != null)
			{
				this.colorSettingsNotificationToken.Dispose();
				this.colorSettingsNotificationToken = null;
			}
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			if (beginFrame.Equals(endFrame))
			{
				return;
			}

			UIView.Animate(args.AnimationDuration, 
				() =>
				{
					this.bottomButtonConstraint.Constant += (beginFrame.Y - endFrame.Y);
					this.View.LayoutIfNeeded();
				});
		}

		partial void closeButtonClicked (UIButton sender)
		{
			NSDictionary newSettings = this.kioskSettingsTableViewController.getNewKioskSettings();
			this.kioskSettings.kioskTitle = newSettings["kioskTitle"].ToString();
			this.kioskSettings.badgePrinting = ((NSNumber)newSettings["badgePrinting"]).BoolValue;
			this.kioskSettings.badgePrintingWebhook = newSettings["badgePrintingWebhook"].ToString();

			DBLocalDataStore.GetInstance().SetKioskSettings(this.kioskSettings);

			this.NavigationController.PopViewController(true);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("ShowContacts"))
			{
				SelectContactViewController target = (SelectContactViewController)segue.DestinationViewController;
				target.isKiosk = true;
			}
		}
	}
}
