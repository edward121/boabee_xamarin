// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using Foundation;
using UIKit;

using BoaBeePCL;
using System.Collections.Generic;
using CoreGraphics;
using BoaBeeLogic;
using Newtonsoft.Json;

namespace BoaBee.iOS
{
    public partial class InfoSheetViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate, IUIAlertViewDelegate
	{
        public string contactUID;

        public DBSyncRequest request;

        //public AnsweredForm form;
        //public bool isSent;

		private UITextView currentTextView;

		private List<DBQuestion> defaultQuestions;
        private List<DBAnswer> defaultAnswers;
        private List<Answer> currentAnswers;
        private List<Answer> copyAnswers;

		private NSObject kbFrameChangeNoificationToken;
		private NSObject kbWillAppearNoificationToken;
		private NSObject kbWillDisappearNoificationToken;

		public InfoSheetViewController (IntPtr handle) : base (handle)
		{
		}



		public override void ViewDidLoad()
        {
			base.ViewDidLoad();

			this.quesionsTableView.EstimatedRowHeight = 44;
			this.quesionsTableView.RowHeight = UITableView.AutomaticDimension;

			string formDefinitionUUID = DBLocalDataStore.GetInstance().GetSelectedQuestionPosition();

            SyncContext context = JsonConvert.DeserializeObject<SyncContext>(request.serializedSyncContext);
            AnsweredForm form = context.forms.Find(f => f.contactUid.Equals(this.contactUID));

            this.defaultQuestions = DBLocalDataStore.GetInstance().GetLocalQuestions(formDefinitionUUID);
            this.defaultAnswers = DBLocalDataStore.GetInstance().GetDefaultAnswers();
            this.currentAnswers = new List<Answer>();

            this.defaultAnswers.ForEach((defAns) =>
            {
                var question = this.defaultQuestions.Find(q => q.name.Equals(defAns.question_name));

                var existingAnswer = form.answers.ToList().Find(a => a.name.Equals(question.name));
                if (existingAnswer != null)
                {
                    this.currentAnswers.Add(existingAnswer);
                }
                else
                {
                    var defaultAnswer = new Answer();
                    defaultAnswer.answer = defAns.answer;
                    defaultAnswer.name = question.name;
                    defaultAnswer.type = question.type;
                    this.currentAnswers.Add(defaultAnswer);
                }
            });

            this.copyAnswers = this.currentAnswers.CopyList();

            var currentContact = DBLocalDataStore.GetInstance().GetLocalContactsByUID(form.contactUid);

            if (!string.IsNullOrEmpty(currentContact.firstname) || !string.IsNullOrEmpty(currentContact.lastname))
            {
                this.contactNameLabel.Text = string.Format(string.IsNullOrEmpty(currentContact.company) ? "{0} {1}" : "{0} {1} ({2})", currentContact.firstname, currentContact.lastname, currentContact.company);
            }
            else
            {
                this.contactNameLabel.Text = string.Format("{0}", currentContact.uid);
            }

            var date = DateTime.Parse(form.startdate);

			this.dateTimeLabel.Text = string.Format("{0:dd/MMM/yyyy H:mm:ss}", new DateTimeOffset(date));

            this.statusLabel.Text = !this.request.isSent ? "only stored locally" : "safely stored in the cloud";
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			this.quesionsTableView.ReloadData();
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

//			this.kbFrameChangeNoificationToken = UIKeyboard.Notifications.ObserveWillChangeFrame(kbFrameChangeCallback);

			this.kbWillAppearNoificationToken = UIKeyboard.Notifications.ObserveWillShow(kbWillAppearCallback);
			this.kbWillDisappearNoificationToken = UIKeyboard.Notifications.ObserveWillHide(kbWillDisappearCallback);
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);

			if (this.kbFrameChangeNoificationToken != null)
			{
				this.kbFrameChangeNoificationToken.Dispose();
				this.kbFrameChangeNoificationToken = null;
			}

			if (this.kbWillAppearNoificationToken != null)
			{
				this.kbWillAppearNoificationToken.Dispose();
				this.kbWillAppearNoificationToken = null;
			}

			if (this.kbWillDisappearNoificationToken != null)
			{
				this.kbWillDisappearNoificationToken.Dispose();
				this.kbWillDisappearNoificationToken = null;
			}
		}

		private void kbFrameChangeCallback (object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;
			CGRect endFrame = args.FrameEnd;

			if (beginFrame.Equals(endFrame))
			{
				return;
			}

			UIView.Animate(args.AnimationDuration, 
			() =>
			{
				this.bottomButtonConstraint.Constant += (beginFrame.Y - endFrame.Y);
				this.View.LayoutIfNeeded();
			}, () =>
			{
				if (this.currentTextView != null)
				{
					CGRect cellRect = this.quesionsTableView.RectForSection(this.currentTextView.Tag);
					this.quesionsTableView.ScrollRectToVisible(cellRect, true);
				}

			});
		}

		private void kbWillAppearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect endFrame = args.FrameEnd;

			Console.Error.WriteLine("kbWillAppear end frame {0}", endFrame.ToString());
			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomButtonConstraint.Constant = endFrame.Height;
					this.View.LayoutIfNeeded();
				}, () =>
				{
					if (this.currentTextView != null)
					{
						CGRect cellRect = this.quesionsTableView.RectForSection(this.currentTextView.Tag);
						this.quesionsTableView.ScrollRectToVisible(cellRect, true);
					}
				});
		}

		private void kbWillDisappearCallback(object sender, UIKeyboardEventArgs args)
		{
			CGRect beginFrame = args.FrameBegin;

			Console.Error.WriteLine("kbWillDisappear begin frame {0}", beginFrame.ToString());

			UIView.Animate(args.AnimationDuration,
				() =>
				{
					this.bottomButtonConstraint.Constant = 0;
					this.View.LayoutIfNeeded();
				});
		}

		[Export("textViewShouldBeginEditing:")]
		public bool ShouldBeginEditing(UITextView textView)
		{
			this.currentTextView = textView;

            return true;
		}

		[Export("textViewDidEndEditing:")]
		public void EditingEnded(UITextView textView)
		{
            var question = this.defaultQuestions[(int)textView.Tag];
            this.copyAnswers[(int)textView.Tag].answer = textView.Text;
		}

		public void didSelectAnswer(NSDictionary userInfo)
		{
			string selectedOption = userInfo[(NSString)"selectedOption"].ToString();
			int questionNumber = ((NSNumber)userInfo["questionNumber"]).Int32Value;

            this.copyAnswers[questionNumber].answer = selectedOption;
		}

		partial void closeButtonClick (UIButton sender)
		{
            //this.NavigationController.PopViewController(true);
			if (this.currentTextView != null)
			{
				this.EditingEnded(this.currentTextView);
			}

            bool listsAreEqual = this.currentAnswers.TrueForAll((a) =>
            {
                int index = this.currentAnswers.IndexOf(a);

                return a.answer.ToLower().Equals(this.copyAnswers[index].answer.ToLower());
            });

            Console.Error.WriteLine("Answers are equal: {0}", listsAreEqual);

			if (listsAreEqual)
			{
				this.NavigationController.PopViewController(true);
			}
			else
			{
				UIAlertView saveAlert = new UIAlertView(null, "Save changes", null, "NO", new string[] {"YES"});
				saveAlert.Delegate = this;
				saveAlert.Show();
			}
		}

		[Export("alertView:clickedButtonAtIndex:")]
		public void alertClicked(UIAlertView alertview, nint buttonIndex)
		{
			if (buttonIndex == 1)
			{
                try
                {
                    OfflineLogic.updateForms(this.contactUID, this.copyAnswers, this.request.Id);
                }
                catch (Exception e)
                {
                    new UIAlertView(null, e.Message, null, "OK", null).Show();
                }
			}
			this.NavigationController.PopViewController(true);
		}

		[Export("tableView:viewForFooterInSection:")]
		public  UIView GetViewForFooter(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:viewForHeaderInSection:")]
		public  UIView GetViewForHeader(UITableView tableView, nint section)
		{
			return null;
		}

		[Export("tableView:heightForFooterInSection:")]
		public nfloat GetHeightForFooter(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		[Export("tableView:heightForHeaderInSection:")]
		public nfloat GetHeightForHeader(UITableView tableView, nint section)
		{
			return new nfloat(0.001);
		}

		[Export("numberOfSectionsInTableView:")]
		public nint NumberOfSections(UITableView tableView)
		{
            return this.defaultQuestions.Count;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			return 2;
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			InfoSheetDetailsCell cell = null;

			DBQuestion questionForCell = this.defaultQuestions[indexPath.Section];

			switch (indexPath.Row)
			{
				case 0:
					{
						cell = (InfoSheetDetailsCell)tableView.DequeueReusableCell("questionCell", indexPath);
						cell.initWithQuestion(questionForCell.question);
					}
					break;
				case 1:
					{
                        var currentAnswerForCell = this.copyAnswers.Find((ans) => ans.name.Equals(questionForCell.name));
                        string answerForCell = currentAnswerForCell.answer;

						string answersOptions = questionForCell.options;
						if (string.IsNullOrEmpty(answersOptions))
						{
							cell = (InfoSheetDetailsCell)tableView.DequeueReusableCell("answerTypingCell", indexPath);
                            cell.initWithAnswerTextViewAndTag(answerForCell, indexPath.Section);
							UITextView cellTextView = cell.getTextView();

							UIDatePicker datePicker = new UIDatePicker();
							datePicker.BackgroundColor = UIColor.FromRGB(0x1B, 0x1B, 0x1B);
							datePicker.SetValueForKey(UIColor.FromRGB(0xED, 0xCD, 0x00), (NSString)"textColor");

							switch (questionForCell.type.ToLower())
							{
								case "datetime":
									{
										datePicker.Mode = UIDatePickerMode.DateAndTime;
										try
										{
											datePicker.SetDate(DateFormatter.parseDateTime(cellTextView.Text), false);
										}
										catch{}

										datePicker.ValueChanged += (object sender, EventArgs e) => 
											{
												string formattedDate = DateFormatter.formatDateTime(datePicker.Date);

												cellTextView.Text = formattedDate;
											};

										cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
										cellTextView.InputView = datePicker;
										break;
									}
								case "date":
									{
										datePicker.Mode = UIDatePickerMode.Date;
										try
										{
											datePicker.SetDate(DateFormatter.parseDate(cellTextView.Text), false);
										}
										catch{}

										datePicker.ValueChanged += (object sender, EventArgs e) => 
											{
												string formattedDate = DateFormatter.formatDate(datePicker.Date);

												cellTextView.Text = formattedDate;
											};

										cellTextView.KeyboardAppearance = UIKeyboardAppearance.Light;
										cellTextView.InputView = datePicker;
										break;
									}
								case "integer":
									{
										cellTextView.KeyboardType = UIKeyboardType.NumberPad;
										cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
										cellTextView.InputView = null;
										break;
									}
								case "string":
									{
										cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
										cellTextView.KeyboardType = UIKeyboardType.Default;
										cellTextView.InputView = null;
										break;
									}
								default:
									{
										cellTextView.KeyboardAppearance = UIKeyboardAppearance.Dark;
										cellTextView.KeyboardType = UIKeyboardType.Default;
										cellTextView.InputView = null;
										break;
									}
							}
						}
						else
						{
							cell = (InfoSheetDetailsCell)tableView.DequeueReusableCell("answerCell", indexPath);
                            cell.initWithAnswerLabel(answerForCell);
						}
					}
					break;
			}

			return cell;
		}

		[Export("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow(indexPath, true);

			if (this.currentTextView != null)
			{
				this.currentTextView.ResignFirstResponder();
				this.currentTextView = null;
			}

			if (indexPath.Row == 1)
			{
				DBQuestion question = this.defaultQuestions[(int)indexPath.Section];

				if (question.options.Length > 0)
				{
					NSDictionary questionDictionary = NSDictionary.FromObjectsAndKeys(new object[] { question.question, question.options, NSNumber.FromInt32(indexPath.Section) }, new object[] { "question", "options", "questionNumber" });

					this.PerformSegue("toEditAnswer", questionDictionary);
				}
			}
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals("toEditAnswer"))
			{
				EditAnswerViewController target = (EditAnswerViewController)segue.DestinationViewController;
				target.questionDictionary = (NSDictionary)sender;
				target.caller = this;
			}
		}
	}
}
